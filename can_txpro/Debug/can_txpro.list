
can_txpro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800559c  0800559c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a4  080055a4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          0000035c  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e85e  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002065  00000000  00000000  000158ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00017950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfb  00000000  00000000  000188a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ef7  00000000  00000000  0001949b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011698  00000000  00000000  0003c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9f3  00000000  00000000  0004da2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012841d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f0  00000000  00000000  00128460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0012cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054dc 	.word	0x080054dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080054dc 	.word	0x080054dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f023 030f 	bic.w	r3, r3, #15
 8000586:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <lcd16x2_i2c_sendCommand+0x60>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <lcd16x2_i2c_sendCommand+0x64>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	23c8      	movs	r3, #200	@ 0xc8
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2304      	movs	r3, #4
 80005c4:	f002 fb0e 	bl	8002be4 <HAL_I2C_Master_Transmit>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000078 	.word	0x20000078
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f023 030f 	bic.w	r3, r3, #15
 80005ee:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <lcd16x2_i2c_sendData+0x60>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <lcd16x2_i2c_sendData+0x64>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f107 0208 	add.w	r2, r7, #8
 8000626:	23c8      	movs	r3, #200	@ 0xc8
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2304      	movs	r3, #4
 800062c:	f002 fada 	bl	8002be4 <HAL_I2C_Master_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000078 	.word	0x20000078
 800063c:	2000007c 	.word	0x2000007c

08000640 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000648:	2032      	movs	r0, #50	@ 0x32
 800064a:	f001 f89f 	bl	800178c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800064e:	4a30      	ldr	r2, [pc, #192]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800065c:	2205      	movs	r2, #5
 800065e:	214e      	movs	r1, #78	@ 0x4e
 8000660:	f002 fbbe 	bl	8002de0 <HAL_I2C_IsDeviceReady>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d010      	beq.n	800068c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000672:	2205      	movs	r2, #5
 8000674:	217e      	movs	r1, #126	@ 0x7e
 8000676:	f002 fbb3 	bl	8002de0 <HAL_I2C_IsDeviceReady>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000680:	2300      	movs	r3, #0
 8000682:	e040      	b.n	8000706 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <lcd16x2_i2c_init+0xd4>)
 8000686:	227e      	movs	r2, #126	@ 0x7e
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e002      	b.n	8000692 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <lcd16x2_i2c_init+0xd4>)
 800068e:	224e      	movs	r2, #78	@ 0x4e
 8000690:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000692:	202d      	movs	r0, #45	@ 0x2d
 8000694:	f001 f87a 	bl	800178c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000698:	2030      	movs	r0, #48	@ 0x30
 800069a:	f7ff ff69 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800069e:	2005      	movs	r0, #5
 80006a0:	f001 f874 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006a4:	2030      	movs	r0, #48	@ 0x30
 80006a6:	f7ff ff63 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 f86e 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b0:	2030      	movs	r0, #48	@ 0x30
 80006b2:	f7ff ff5d 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f001 f868 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ff57 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c2:	2008      	movs	r0, #8
 80006c4:	f001 f862 	bl	800178c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006c8:	2028      	movs	r0, #40	@ 0x28
 80006ca:	f7ff ff51 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f001 f85c 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006d4:	2008      	movs	r0, #8
 80006d6:	f7ff ff4b 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f001 f856 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff45 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f001 f850 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff3f 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 f84a 	bl	800178c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f7ff ff39 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006fe:	2003      	movs	r0, #3
 8000700:	f001 f844 	bl	800178c <HAL_Delay>

  return true;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	2000007c 	.word	0x2000007c

08000718 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d108      	bne.n	8000748 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff15 	bl	8000570 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000746:	e007      	b.n	8000758 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800074e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff0c 	bl	8000570 <lcd16x2_i2c_sendCommand>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000760:	b40f      	push	{r0, r1, r2, r3}
 8000762:	b590      	push	{r4, r7, lr}
 8000764:	b089      	sub	sp, #36	@ 0x24
 8000766:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000768:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800076c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fa26 	bl	8004bc8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	77fb      	strb	r3, [r7, #31]
 8000780:	e00a      	b.n	8000798 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000782:	7ffb      	ldrb	r3, [r7, #31]
 8000784:	3320      	adds	r3, #32
 8000786:	443b      	add	r3, r7
 8000788:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff23 	bl	80005d8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	3301      	adds	r3, #1
 8000796:	77fb      	strb	r3, [r7, #31]
 8000798:	7ffc      	ldrb	r4, [r7, #31]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d202      	bcs.n	80007b0 <lcd16x2_i2c_printf+0x50>
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d9e8      	bls.n	8000782 <lcd16x2_i2c_printf+0x22>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3724      	adds	r7, #36	@ 0x24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007ba:	b004      	add	sp, #16
 80007bc:	4770      	bx	lr
	...

080007c0 <Rain_sensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//rain
void Rain_sensor(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <Rain_sensor+0x2c>)
 80007c6:	f001 f849 	bl	800185c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80007ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007ce:	4807      	ldr	r0, [pc, #28]	@ (80007ec <Rain_sensor+0x2c>)
 80007d0:	f001 f949 	bl	8001a66 <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc1);
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <Rain_sensor+0x2c>)
 80007d6:	f001 f9d1 	bl	8001b7c <HAL_ADC_GetValue>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <Rain_sensor+0x30>)
 80007e0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80007e2:	4802      	ldr	r0, [pc, #8]	@ (80007ec <Rain_sensor+0x2c>)
 80007e4:	f001 f90c 	bl	8001a00 <HAL_ADC_Stop>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000080 	.word	0x20000080
 80007f0:	20000248 	.word	0x20000248

080007f4 <Ultrasonic_distance>:
//ultrasonic
void Ultrasonic_distance(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN,
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <Ultrasonic_distance+0x38>)
 8000800:	f002 f892 	bl	8002928 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_Delay(10);
 8000804:	200a      	movs	r0, #10
 8000806:	f000 ffc1 	bl	800178c <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN,
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <Ultrasonic_distance+0x38>)
 8000812:	f002 f889 	bl	8002928 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <Ultrasonic_distance+0x3c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <Ultrasonic_distance+0x3c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 0202 	orr.w	r2, r2, #2
 8000824:	60da      	str	r2, [r3, #12]
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020c00 	.word	0x40020c00
 8000830:	2000018c 	.word	0x2000018c

08000834 <microDelay>:
	}

}
//DHT22

void microDelay(uint16_t delay) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <microDelay+0x30>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8000846:	bf00      	nop
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <microDelay+0x30>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3f9      	bcc.n	8000848 <microDelay+0x14>
		;
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000144 	.word	0x20000144

08000868 <DHT22_Start>:

uint8_t DHT22_Start(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8000880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000884:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	482d      	ldr	r0, [pc, #180]	@ (800094c <DHT22_Start+0xe4>)
 8000898:	f001 fe92 	bl	80025c0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a2:	482a      	ldr	r0, [pc, #168]	@ (800094c <DHT22_Start+0xe4>)
 80008a4:	f002 f840 	bl	8002928 <HAL_GPIO_WritePin>
	microDelay(1300);   // wait for 1300us
 80008a8:	f240 5014 	movw	r0, #1300	@ 0x514
 80008ac:	f7ff ffc2 	bl	8000834 <microDelay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4825      	ldr	r0, [pc, #148]	@ (800094c <DHT22_Start+0xe4>)
 80008b8:	f002 f836 	bl	8002928 <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 80008bc:	201e      	movs	r0, #30
 80008be:	f7ff ffb9 	bl	8000834 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	481f      	ldr	r0, [pc, #124]	@ (800094c <DHT22_Start+0xe4>)
 80008d0:	f001 fe76 	bl	80025c0 <HAL_GPIO_Init>
	microDelay(40);
 80008d4:	2028      	movs	r0, #40	@ 0x28
 80008d6:	f7ff ffad 	bl	8000834 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 80008da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008de:	481b      	ldr	r0, [pc, #108]	@ (800094c <DHT22_Start+0xe4>)
 80008e0:	f002 f80a 	bl	80028f8 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10c      	bne.n	8000904 <DHT22_Start+0x9c>
		microDelay(80);
 80008ea:	2050      	movs	r0, #80	@ 0x50
 80008ec:	f7ff ffa2 	bl	8000834 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 80008f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f4:	4815      	ldr	r0, [pc, #84]	@ (800094c <DHT22_Start+0xe4>)
 80008f6:	f001 ffff 	bl	80028f8 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <DHT22_Start+0x9c>
			Response = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8000904:	f000 ff36 	bl	8001774 <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <DHT22_Start+0xe8>)
 800090c:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 800090e:	f000 ff31 	bl	8001774 <HAL_GetTick>
 8000912:	4603      	mov	r3, r0
 8000914:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <DHT22_Start+0xec>)
 8000916:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8000918:	e004      	b.n	8000924 <DHT22_Start+0xbc>
		cMillis = HAL_GetTick();
 800091a:	f000 ff2b 	bl	8001774 <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <DHT22_Start+0xec>)
 8000922:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8000924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <DHT22_Start+0xe4>)
 800092a:	f001 ffe5 	bl	80028f8 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <DHT22_Start+0xda>
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <DHT22_Start+0xe8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1c9a      	adds	r2, r3, #2
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <DHT22_Start+0xec>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d8eb      	bhi.n	800091a <DHT22_Start+0xb2>
	}
	return Response;
 8000942:	7dfb      	ldrb	r3, [r7, #23]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40020400 	.word	0x40020400
 8000950:	20000254 	.word	0x20000254
 8000954:	20000258 	.word	0x20000258

08000958 <DHT22_Read>:

uint8_t DHT22_Read(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e066      	b.n	8000a32 <DHT22_Read+0xda>
		pMillis = HAL_GetTick();
 8000964:	f000 ff06 	bl	8001774 <HAL_GetTick>
 8000968:	4603      	mov	r3, r0
 800096a:	4a36      	ldr	r2, [pc, #216]	@ (8000a44 <DHT22_Read+0xec>)
 800096c:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 800096e:	f000 ff01 	bl	8001774 <HAL_GetTick>
 8000972:	4603      	mov	r3, r0
 8000974:	4a34      	ldr	r2, [pc, #208]	@ (8000a48 <DHT22_Read+0xf0>)
 8000976:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8000978:	e004      	b.n	8000984 <DHT22_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 800097a:	f000 fefb 	bl	8001774 <HAL_GetTick>
 800097e:	4603      	mov	r3, r0
 8000980:	4a31      	ldr	r2, [pc, #196]	@ (8000a48 <DHT22_Read+0xf0>)
 8000982:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8000984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000988:	4830      	ldr	r0, [pc, #192]	@ (8000a4c <DHT22_Read+0xf4>)
 800098a:	f001 ffb5 	bl	80028f8 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 8000990:	2b00      	cmp	r3, #0
 8000992:	d106      	bne.n	80009a2 <DHT22_Read+0x4a>
 8000994:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <DHT22_Read+0xec>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1c9a      	adds	r2, r3, #2
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <DHT22_Read+0xf0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d8eb      	bhi.n	800097a <DHT22_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 80009a2:	2028      	movs	r0, #40	@ 0x28
 80009a4:	f7ff ff46 	bl	8000834 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80009a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ac:	4827      	ldr	r0, [pc, #156]	@ (8000a4c <DHT22_Read+0xf4>)
 80009ae:	f001 ffa3 	bl	80028f8 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10e      	bne.n	80009d6 <DHT22_Read+0x7e>
			b &= ~(1 << (7 - a));
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2201      	movs	r2, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	b25a      	sxtb	r2, r3
 80009ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009ce:	4013      	ands	r3, r2
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	71bb      	strb	r3, [r7, #6]
 80009d4:	e00b      	b.n	80009ee <DHT22_Read+0x96>
		else
			b |= (1 << (7 - a));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f1c3 0307 	rsb	r3, r3, #7
 80009dc:	2201      	movs	r2, #1
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	b25a      	sxtb	r2, r3
 80009e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 80009ee:	f000 fec1 	bl	8001774 <HAL_GetTick>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <DHT22_Read+0xec>)
 80009f6:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80009f8:	f000 febc 	bl	8001774 <HAL_GetTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <DHT22_Read+0xf0>)
 8000a00:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8000a02:	e004      	b.n	8000a0e <DHT22_Read+0xb6>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 8000a04:	f000 feb6 	bl	8001774 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <DHT22_Read+0xf0>)
 8000a0c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8000a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a12:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <DHT22_Read+0xf4>)
 8000a14:	f001 ff70 	bl	80028f8 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d006      	beq.n	8000a2c <DHT22_Read+0xd4>
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <DHT22_Read+0xec>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1c9a      	adds	r2, r3, #2
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <DHT22_Read+0xf0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8eb      	bhi.n	8000a04 <DHT22_Read+0xac>
	for (a = 0; a < 8; a++) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d995      	bls.n	8000964 <DHT22_Read+0xc>
		}
	}
	return b;
 8000a38:	79bb      	ldrb	r3, [r7, #6]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000254 	.word	0x20000254
 8000a48:	20000258 	.word	0x20000258
 8000a4c:	40020400 	.word	0x40020400

08000a50 <Read_dht22>:

void Read_dht22(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	if (DHT22_Start()) {
 8000a54:	f7ff ff08 	bl	8000868 <DHT22_Start>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8082 	beq.w	8000b64 <Read_dht22+0x114>
		RH1 = DHT22_Read(); // First 8bits of humidity
 8000a60:	f7ff ff7a 	bl	8000958 <DHT22_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <Read_dht22+0x118>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8000a6c:	f7ff ff74 	bl	8000958 <DHT22_Read>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b3d      	ldr	r3, [pc, #244]	@ (8000b6c <Read_dht22+0x11c>)
 8000a76:	701a      	strb	r2, [r3, #0]
		TC1 = DHT22_Read(); // First 8bits of Celsius
 8000a78:	f7ff ff6e 	bl	8000958 <DHT22_Read>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <Read_dht22+0x120>)
 8000a82:	701a      	strb	r2, [r3, #0]
		TC2 = DHT22_Read(); // Second 8bits of Celsius
 8000a84:	f7ff ff68 	bl	8000958 <DHT22_Read>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <Read_dht22+0x124>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read(); // Check sum
 8000a90:	f7ff ff62 	bl	8000958 <DHT22_Read>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <Read_dht22+0x128>)
 8000a9a:	701a      	strb	r2, [r3, #0]
		CHECK = RH1 + RH2 + TC1 + TC2;
 8000a9c:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <Read_dht22+0x118>)
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <Read_dht22+0x11c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <Read_dht22+0x120>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <Read_dht22+0x124>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <Read_dht22+0x12c>)
 8000aba:	701a      	strb	r2, [r3, #0]
		if (CHECK == SUM) {
 8000abc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <Read_dht22+0x12c>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <Read_dht22+0x128>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d14d      	bne.n	8000b64 <Read_dht22+0x114>
			if (TC1 > 127) // If TC1=10000000, negative temperature
 8000ac8:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <Read_dht22+0x120>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da0f      	bge.n	8000af2 <Read_dht22+0xa2>
					{
				tCelsius = (float) TC2 / 10 * (-1);
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <Read_dht22+0x124>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ade:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae6:	eef1 7a67 	vneg.f32	s15, s15
 8000aea:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <Read_dht22+0x130>)
 8000aec:	edc3 7a00 	vstr	s15, [r3]
 8000af0:	e010      	b.n	8000b14 <Read_dht22+0xc4>
			} else {
				tCelsius = (float) ((TC1 << 8) | TC2) / 10;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <Read_dht22+0x120>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <Read_dht22+0x124>)
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b06:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <Read_dht22+0x130>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
			}
			//tFahrenheit = (float) (tCelsius * 9 / 5 + 32);
			tFahrenheit = (int) (tCelsius * 9 / 5 + 32) * 10;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <Read_dht22+0x130>)
 8000b16:	edd3 7a00 	vldr	s15, [r3]
 8000b1a:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8000b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b22:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b2a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000b84 <Read_dht22+0x134>
 8000b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b36:	ee17 2a90 	vmov	r2, s15
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <Read_dht22+0x138>)
 8000b46:	601a      	str	r2, [r3, #0]
			RH = (int) ((RH1 << 8) | RH2) / 10;
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <Read_dht22+0x118>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <Read_dht22+0x11c>)
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <Read_dht22+0x13c>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	1092      	asrs	r2, r2, #2
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <Read_dht22+0x140>)
 8000b62:	6013      	str	r3, [r2, #0]
			//RH = (int) ((RH1 << 8) | RH2);
		}
	}
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000024c 	.word	0x2000024c
 8000b6c:	2000024d 	.word	0x2000024d
 8000b70:	2000024e 	.word	0x2000024e
 8000b74:	2000024f 	.word	0x2000024f
 8000b78:	20000250 	.word	0x20000250
 8000b7c:	20000251 	.word	0x20000251
 8000b80:	2000025c 	.word	0x2000025c
 8000b84:	42000000 	.word	0x42000000
 8000b88:	20000260 	.word	0x20000260
 8000b8c:	66666667 	.word	0x66666667
 8000b90:	20000264 	.word	0x20000264

08000b94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0aa      	sub	sp, #168	@ 0xa8
 8000b98:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b9a:	f000 fd85 	bl	80016a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b9e:	f000 f941 	bl	8000e24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ba2:	f000 fb1f 	bl	80011e4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ba6:	f000 f9a7 	bl	8000ef8 <MX_ADC1_Init>
	MX_CAN1_Init();
 8000baa:	f000 f9f7 	bl	8000f9c <MX_CAN1_Init>
	MX_I2C1_Init();
 8000bae:	f000 fa2b 	bl	8001008 <MX_I2C1_Init>
	MX_TIM4_Init();
 8000bb2:	f000 faa7 	bl	8001104 <MX_TIM4_Init>
	MX_TIM1_Init();
 8000bb6:	f000 fa55 	bl	8001064 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 8000bba:	4884      	ldr	r0, [pc, #528]	@ (8000dcc <main+0x238>)
 8000bbc:	f001 fb05 	bl	80021ca <HAL_CAN_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); //timer
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4883      	ldr	r0, [pc, #524]	@ (8000dd0 <main+0x23c>)
 8000bc4:	f003 fa2c 	bl	8004020 <HAL_TIM_IC_Start_IT>
	int ret = lcd16x2_i2c_init(&hi2c1);
 8000bc8:	4882      	ldr	r0, [pc, #520]	@ (8000dd4 <main+0x240>)
 8000bca:	f7ff fd39 	bl	8000640 <lcd16x2_i2c_init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	HAL_TIM_Base_Start(&htim1); //dht22
 8000bd4:	4880      	ldr	r0, [pc, #512]	@ (8000dd8 <main+0x244>)
 8000bd6:	f003 f961 	bl	8003e9c <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - lastSentTime > 500) {
 8000bda:	f000 fdcb 	bl	8001774 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	4b7e      	ldr	r3, [pc, #504]	@ (8000ddc <main+0x248>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bea:	d9f6      	bls.n	8000bda <main+0x46>
			Ultrasonic_distance();
 8000bec:	f7ff fe02 	bl	80007f4 <Ultrasonic_distance>
			if (distance > 40 && distance < 80) {
 8000bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8000de0 <main+0x24c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b28      	cmp	r3, #40	@ 0x28
 8000bf6:	d941      	bls.n	8000c7c <main+0xe8>
 8000bf8:	4b79      	ldr	r3, [pc, #484]	@ (8000de0 <main+0x24c>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	2b4f      	cmp	r3, #79	@ 0x4f
 8000bfe:	d83d      	bhi.n	8000c7c <main+0xe8>
				sprintf(str, "Distance : %d cms \r \n", distance);
 8000c00:	4b77      	ldr	r3, [pc, #476]	@ (8000de0 <main+0x24c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c0a:	4976      	ldr	r1, [pc, #472]	@ (8000de4 <main+0x250>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 ffa5 	bl	8004b5c <siprintf>
				if (ret) {
 8000c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d008      	beq.n	8000c2c <main+0x98>
					lcd16x2_i2c_setCursor(0, 0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fd7b 	bl	8000718 <lcd16x2_i2c_setCursor>
					lcd16x2_i2c_printf(str);
 8000c22:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd9a 	bl	8000760 <lcd16x2_i2c_printf>
				}
				TxHeader1.StdId = 0x0A9;
 8000c2c:	4b6e      	ldr	r3, [pc, #440]	@ (8000de8 <main+0x254>)
 8000c2e:	22a9      	movs	r2, #169	@ 0xa9
 8000c30:	601a      	str	r2, [r3, #0]
				TxHeader1.ExtId = 0x0;
 8000c32:	4b6d      	ldr	r3, [pc, #436]	@ (8000de8 <main+0x254>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
				TxHeader1.IDE = CAN_ID_STD;
 8000c38:	4b6b      	ldr	r3, [pc, #428]	@ (8000de8 <main+0x254>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
				TxHeader1.RTR = CAN_RTR_DATA;
 8000c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8000de8 <main+0x254>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
				TxHeader1.DLC = 2;
 8000c44:	4b68      	ldr	r3, [pc, #416]	@ (8000de8 <main+0x254>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	611a      	str	r2, [r3, #16]
				TxData1[0] = (uint8_t) (distance & 0xFF);
 8000c4a:	4b65      	ldr	r3, [pc, #404]	@ (8000de0 <main+0x24c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b66      	ldr	r3, [pc, #408]	@ (8000dec <main+0x258>)
 8000c52:	701a      	strb	r2, [r3, #0]
				TxData1[1] = (uint8_t) ((distance >> 8) & 0xFF);
 8000c54:	4b62      	ldr	r3, [pc, #392]	@ (8000de0 <main+0x24c>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b63      	ldr	r3, [pc, #396]	@ (8000dec <main+0x258>)
 8000c60:	705a      	strb	r2, [r3, #1]

				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1,
 8000c62:	4b63      	ldr	r3, [pc, #396]	@ (8000df0 <main+0x25c>)
 8000c64:	4a61      	ldr	r2, [pc, #388]	@ (8000dec <main+0x258>)
 8000c66:	4960      	ldr	r1, [pc, #384]	@ (8000de8 <main+0x254>)
 8000c68:	4858      	ldr	r0, [pc, #352]	@ (8000dcc <main+0x238>)
 8000c6a:	f001 faf2 	bl	8002252 <HAL_CAN_AddTxMessage>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80a9 	beq.w	8000dc8 <main+0x234>
						&TxMailbox1) != HAL_OK) {
					Error_Handler();
 8000c76:	f000 fb15 	bl	80012a4 <Error_Handler>
				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1,
 8000c7a:	e0a5      	b.n	8000dc8 <main+0x234>
				}
			} else if (adcVal >= 1500 && adcVal <= 4000) {
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <main+0x260>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000c84:	4293      	cmp	r3, r2
 8000c86:	dd41      	ble.n	8000d0c <main+0x178>
 8000c88:	4b5a      	ldr	r3, [pc, #360]	@ (8000df4 <main+0x260>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000c90:	dc3c      	bgt.n	8000d0c <main+0x178>
				Rain_sensor();
 8000c92:	f7ff fd95 	bl	80007c0 <Rain_sensor>
				sprintf(str, "Rain Detected: %d \r\n", adcVal);
 8000c96:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <main+0x260>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c9e:	4956      	ldr	r1, [pc, #344]	@ (8000df8 <main+0x264>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff5b 	bl	8004b5c <siprintf>
				if (ret) {
 8000ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <main+0x12c>
					lcd16x2_i2c_setCursor(0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fd31 	bl	8000718 <lcd16x2_i2c_setCursor>
					lcd16x2_i2c_printf(str);
 8000cb6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd50 	bl	8000760 <lcd16x2_i2c_printf>
				}
				TxHeader2.StdId = 0x0AA;
 8000cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8000dfc <main+0x268>)
 8000cc2:	22aa      	movs	r2, #170	@ 0xaa
 8000cc4:	601a      	str	r2, [r3, #0]
				TxHeader2.ExtId = 0x0;
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8000dfc <main+0x268>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
				TxHeader2.IDE = CAN_ID_STD;
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8000dfc <main+0x268>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
				TxHeader2.RTR = CAN_RTR_DATA;
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dfc <main+0x268>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
				TxHeader2.DLC = 2;
 8000cd8:	4b48      	ldr	r3, [pc, #288]	@ (8000dfc <main+0x268>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	611a      	str	r2, [r3, #16]
				TxData2[0] = (uint8_t) (adcVal & 0xFF);
 8000cde:	4b45      	ldr	r3, [pc, #276]	@ (8000df4 <main+0x260>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <main+0x26c>)
 8000ce6:	701a      	strb	r2, [r3, #0]
				TxData2[1] = (uint8_t) ((adcVal >> 8) & 0xFF);
 8000ce8:	4b42      	ldr	r3, [pc, #264]	@ (8000df4 <main+0x260>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	121b      	asrs	r3, r3, #8
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <main+0x26c>)
 8000cf2:	705a      	strb	r2, [r3, #1]

				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2,
 8000cf4:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <main+0x270>)
 8000cf6:	4a42      	ldr	r2, [pc, #264]	@ (8000e00 <main+0x26c>)
 8000cf8:	4940      	ldr	r1, [pc, #256]	@ (8000dfc <main+0x268>)
 8000cfa:	4834      	ldr	r0, [pc, #208]	@ (8000dcc <main+0x238>)
 8000cfc:	f001 faa9 	bl	8002252 <HAL_CAN_AddTxMessage>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d060      	beq.n	8000dc8 <main+0x234>
						&TxMailbox2) != HAL_OK) {
					Error_Handler();
 8000d06:	f000 facd 	bl	80012a4 <Error_Handler>
				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2,
 8000d0a:	e05d      	b.n	8000dc8 <main+0x234>
				}
			} else {
				Read_dht22();
 8000d0c:	f7ff fea0 	bl	8000a50 <Read_dht22>
				DHT22_Read();
 8000d10:	f7ff fe22 	bl	8000958 <DHT22_Read>
				//sprintf(str0, "temperature : %d C \r \n", (int) tFahrenheit);
				sprintf(str0, "temperature : %d C \r \n", 28);
 8000d14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d18:	221c      	movs	r2, #28
 8000d1a:	493b      	ldr	r1, [pc, #236]	@ (8000e08 <main+0x274>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 ff1d 	bl	8004b5c <siprintf>
				sprintf(str1, "humidity : %d \r \n", (int) RH);
 8000d22:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <main+0x278>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4939      	ldr	r1, [pc, #228]	@ (8000e10 <main+0x27c>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 ff16 	bl	8004b5c <siprintf>
				sprintf(str1, "humidity : %d \r \n",26);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	221a      	movs	r2, #26
 8000d34:	4936      	ldr	r1, [pc, #216]	@ (8000e10 <main+0x27c>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 ff10 	bl	8004b5c <siprintf>
				if (ret) {
 8000d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d010      	beq.n	8000d66 <main+0x1d2>
					lcd16x2_i2c_setCursor(0, 0);
 8000d44:	2100      	movs	r1, #0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fce6 	bl	8000718 <lcd16x2_i2c_setCursor>
					lcd16x2_i2c_printf(str0);
 8000d4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd05 	bl	8000760 <lcd16x2_i2c_printf>
					lcd16x2_i2c_setCursor(1, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fcdd 	bl	8000718 <lcd16x2_i2c_setCursor>
					lcd16x2_i2c_printf(str1);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fcfd 	bl	8000760 <lcd16x2_i2c_printf>
				}
				TxHeader3.StdId = 0x0AB;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <main+0x280>)
 8000d68:	22ab      	movs	r2, #171	@ 0xab
 8000d6a:	601a      	str	r2, [r3, #0]
				TxHeader3.ExtId = 0x0;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <main+0x280>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
				TxHeader3.IDE = CAN_ID_STD;
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <main+0x280>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
				TxHeader3.RTR = CAN_RTR_DATA;
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <main+0x280>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
				TxHeader3.DLC = 4;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <main+0x280>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	611a      	str	r2, [r3, #16]
				TxData3[0] = (uint8_t) (tFahrenheit & 0xFF);
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <main+0x284>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <main+0x288>)
 8000d8c:	701a      	strb	r2, [r3, #0]
				TxData3[1] = (uint8_t) ((tFahrenheit >> 8) & 0xFF);
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <main+0x284>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	121b      	asrs	r3, r3, #8
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <main+0x288>)
 8000d98:	705a      	strb	r2, [r3, #1]
				TxData3[2] = (uint8_t) (RH & 0xFF);
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <main+0x278>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <main+0x288>)
 8000da2:	709a      	strb	r2, [r3, #2]
				TxData3[3] = (uint8_t) ((RH >> 8) & 0xFF);
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <main+0x278>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	121b      	asrs	r3, r3, #8
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <main+0x288>)
 8000dae:	70da      	strb	r2, [r3, #3]

				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader3, TxData3,
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <main+0x28c>)
 8000db2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <main+0x288>)
 8000db4:	4917      	ldr	r1, [pc, #92]	@ (8000e14 <main+0x280>)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <main+0x238>)
 8000db8:	f001 fa4b 	bl	8002252 <HAL_CAN_AddTxMessage>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f43f af0b 	beq.w	8000bda <main+0x46>
						&TxMailbox3) != HAL_OK) {
					Error_Handler();
 8000dc4:	f000 fa6e 	bl	80012a4 <Error_Handler>
		if (HAL_GetTick() - lastSentTime > 500) {
 8000dc8:	e707      	b.n	8000bda <main+0x46>
 8000dca:	bf00      	nop
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	2000018c 	.word	0x2000018c
 8000dd4:	200000f0 	.word	0x200000f0
 8000dd8:	20000144 	.word	0x20000144
 8000ddc:	200001d4 	.word	0x200001d4
 8000de0:	20000244 	.word	0x20000244
 8000de4:	080054f4 	.word	0x080054f4
 8000de8:	200001d8 	.word	0x200001d8
 8000dec:	20000220 	.word	0x20000220
 8000df0:	20000238 	.word	0x20000238
 8000df4:	20000248 	.word	0x20000248
 8000df8:	0800550c 	.word	0x0800550c
 8000dfc:	200001f0 	.word	0x200001f0
 8000e00:	20000228 	.word	0x20000228
 8000e04:	2000023c 	.word	0x2000023c
 8000e08:	08005524 	.word	0x08005524
 8000e0c:	20000264 	.word	0x20000264
 8000e10:	0800553c 	.word	0x0800553c
 8000e14:	20000208 	.word	0x20000208
 8000e18:	20000260 	.word	0x20000260
 8000e1c:	20000230 	.word	0x20000230
 8000e20:	20000240 	.word	0x20000240

08000e24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	@ 0x50
 8000e28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	@ 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fed2 	bl	8004bdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	4a27      	ldr	r2, [pc, #156]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e94:	2308      	movs	r3, #8
 8000e96:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e9c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fb22 	bl	80034f4 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x96>
		Error_Handler();
 8000eb6:	f000 f9f5 	bl	80012a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fd83 	bl	80039e4 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xc4>
		Error_Handler();
 8000ee4:	f000 f9de 	bl	80012a4 <Error_Handler>
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	@ 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <MX_ADC1_Init+0x9c>)
 8000f0e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f16:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <MX_ADC1_Init+0xa0>)
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f5a:	f000 fc3b 	bl	80017d4 <HAL_ADC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000f64:	f000 f99e 	bl	80012a4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f7a:	f000 fe0d 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000f84:	f000 f98e 	bl	80012a4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000080 	.word	0x20000080
 8000f94:	40012000 	.word	0x40012000
 8000f98:	0f000001 	.word	0x0f000001

08000f9c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <MX_CAN1_Init+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 21;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fa8:	2215      	movs	r2, #21
 8000faa:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fbe:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_CAN1_Init+0x64>)
 8000fec:	f000 fff2 	bl	8001fd4 <HAL_CAN_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_CAN1_Init+0x5e>
		Error_Handler();
 8000ff6:	f000 f955 	bl	80012a4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000c8 	.word	0x200000c8
 8001004:	40006400 	.word	0x40006400

08001008 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	@ (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800102a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f001 fc89 	bl	800295c <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001050:	f000 f928 	bl	80012a4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000f0 	.word	0x200000f0
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_TIM1_Init+0x98>)
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <MX_TIM1_Init+0x9c>)
 8001084:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM1_Init+0x98>)
 8001088:	2247      	movs	r2, #71	@ 0x47
 800108a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_TIM1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM1_Init+0x98>)
 8001094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001098:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_TIM1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_TIM1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <MX_TIM1_Init+0x98>)
 80010ae:	f002 fea5 	bl	8003dfc <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x58>
		Error_Handler();
 80010b8:	f000 f8f4 	bl	80012a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <MX_TIM1_Init+0x98>)
 80010ca:	f003 f96d 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80010d4:	f000 f8e6 	bl	80012a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_TIM1_Init+0x98>)
 80010e6:	f003 fcbd 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80010f0:	f000 f8d8 	bl	80012a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000144 	.word	0x20000144
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <MX_TIM4_Init+0xdc>)
 8001132:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001136:	2253      	movs	r2, #83	@ 0x53
 8001138:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_TIM4_Init+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001146:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_TIM4_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001154:	4821      	ldr	r0, [pc, #132]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001156:	f002 fe51 	bl	8003dfc <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM4_Init+0x60>
		Error_Handler();
 8001160:	f000 f8a0 	bl	80012a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	481a      	ldr	r0, [pc, #104]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001172:	f003 f919 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM4_Init+0x7c>
		Error_Handler();
 800117c:	f000 f892 	bl	80012a4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 8001180:	4816      	ldr	r0, [pc, #88]	@ (80011dc <MX_TIM4_Init+0xd8>)
 8001182:	f002 fef3 	bl	8003f6c <HAL_TIM_IC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM4_Init+0x8c>
		Error_Handler();
 800118c:	f000 f88a 	bl	80012a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <MX_TIM4_Init+0xd8>)
 80011a0:	f003 fc60 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80011aa:	f000 f87b 	bl	80012a4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b2:	2301      	movs	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_TIM4_Init+0xd8>)
 80011c6:	f003 f853 	bl	8004270 <HAL_TIM_IC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0xd0>
		Error_Handler();
 80011d0:	f000 f868 	bl	80012a4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000018c 	.word	0x2000018c
 80011e0:	40000800 	.word	0x40000800

080011e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b27      	ldr	r3, [pc, #156]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a26      	ldr	r2, [pc, #152]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <MX_GPIO_Init+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <MX_GPIO_Init+0xb8>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14,
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 8001270:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <MX_GPIO_Init+0xbc>)
 8001272:	f001 fb59 	bl	8002928 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PD11 PD13 PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8001276:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800127a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_GPIO_Init+0xbc>)
 8001290:	f001 f996 	bl	80025c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_MspInit+0x4c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <HAL_MspInit+0x4c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ee:	2007      	movs	r0, #7
 80012f0:	f001 f932 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_ADC_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d127      	bne.n	8001372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_ADC_MspInit+0x80>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_ADC_MspInit+0x84>)
 800136e:	f001 f927 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_CAN_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12c      	bne.n	8001404 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_CAN_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013f4:	2309      	movs	r3, #9
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_CAN_MspInit+0x8c>)
 8001400:	f001 f8de 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40006400 	.word	0x40006400
 8001410:	40023800 	.word	0x40023800
 8001414:	40020400 	.word	0x40020400

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <HAL_I2C_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12b      	bne.n	8001492 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23c0      	movs	r3, #192	@ 0xc0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <HAL_I2C_MspInit+0x8c>)
 8001472:	f001 f8a5 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	@ 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40005400 	.word	0x40005400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_TIM_Base_MspInit+0xac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10e      	bne.n	80014e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014e6:	e031      	b.n	800154c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_TIM_Base_MspInit+0xb4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12c      	bne.n	800154c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_TIM_Base_MspInit+0xb0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800152a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800153c:	2302      	movs	r3, #2
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <HAL_TIM_Base_MspInit+0xb8>)
 8001548:	f001 f83a 	bl	80025c0 <HAL_GPIO_Init>
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800
 800155c:	40000800 	.word	0x40000800
 8001560:	40020c00 	.word	0x40020c00

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <NMI_Handler+0x4>

0800156c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <MemManage_Handler+0x4>

0800157c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <UsageFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ba:	f000 f8c7 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f003 fafa 	bl	8004bec <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000268 	.word	0x20000268
 800162c:	200003b8 	.word	0x200003b8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f003 fab9 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fa85 	bl	8000b94 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001698:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 800169c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016a0:	200003b8 	.word	0x200003b8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 ff41 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fde8 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 ff4b 	bl	80025a6 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001728:	f000 ff21 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	2000026c 	.word	0x2000026c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000026c 	.word	0x2000026c

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e033      	b.n	8001852 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fd84 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fad8 	bl	8001ddc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
 8001842:	e001      	b.n	8001848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Start+0x1a>
 8001872:	2302      	movs	r3, #2
 8001874:	e0b2      	b.n	80019dc <HAL_ADC_Start+0x180>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d018      	beq.n	80018be <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800189c:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <HAL_ADC_Start+0x18c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a52      	ldr	r2, [pc, #328]	@ (80019ec <HAL_ADC_Start+0x190>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9a      	lsrs	r2, r3, #18
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d17a      	bne.n	80019c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800190a:	d106      	bne.n	800191a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	f023 0206 	bic.w	r2, r3, #6
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
 8001918:	e002      	b.n	8001920 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_ADC_Start+0x194>)
 800192a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001934:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2b00      	cmp	r3, #0
 8001940:	d12a      	bne.n	8001998 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <HAL_ADC_Start+0x198>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d015      	beq.n	8001978 <HAL_ADC_Start+0x11c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a29      	ldr	r2, [pc, #164]	@ (80019f8 <HAL_ADC_Start+0x19c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d105      	bne.n	8001962 <HAL_ADC_Start+0x106>
 8001956:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_ADC_Start+0x194>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <HAL_ADC_Start+0x1a0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d136      	bne.n	80019da <HAL_ADC_Start+0x17e>
 800196c:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_ADC_Start+0x194>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d130      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d129      	bne.n	80019da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e020      	b.n	80019da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_ADC_Start+0x198>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11b      	bne.n	80019da <HAL_ADC_Start+0x17e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d114      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00b      	b.n	80019da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000000 	.word	0x20000000
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40012100 	.word	0x40012100
 80019fc:	40012200 	.word	0x40012200

08001a00 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Stop+0x16>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e021      	b.n	8001a5a <HAL_ADC_Stop+0x5a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a82:	d113      	bne.n	8001aac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e063      	b.n	8001b74 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aac:	f7ff fe62 	bl	8001774 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab2:	e021      	b.n	8001af8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aba:	d01d      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0x6c>
 8001ac2:	f7ff fe57 	bl	8001774 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d212      	bcs.n	8001af8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d00b      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0204 	orr.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e03d      	b.n	8001b74 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d1d6      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0212 	mvn.w	r2, #18
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d123      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11f      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d111      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e105      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x228>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d925      	bls.n	8001c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	2207      	movs	r2, #7
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43da      	mvns	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	400a      	ands	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4403      	add	r3, r0
 8001c02:	3b1e      	subs	r3, #30
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	e022      	b.n	8001c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	2207      	movs	r2, #7
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6919      	ldr	r1, [r3, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4403      	add	r3, r0
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d824      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca6:	e04c      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d824      	bhi.n	8001cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b23      	subs	r3, #35	@ 0x23
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	400a      	ands	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b23      	subs	r3, #35	@ 0x23
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf8:	e023      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b41      	subs	r3, #65	@ 0x41
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	400a      	ands	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b41      	subs	r3, #65	@ 0x41
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <HAL_ADC_ConfigChannel+0x234>)
 8001d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x1e6>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d111      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x240>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9a      	lsrs	r2, r3, #18
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40012300 	.word	0x40012300
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <ADC_Init+0x1f0>)
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	021a      	lsls	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <ADC_Init+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6899      	ldr	r1, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	e00f      	b.n	8001eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0202 	bic.w	r2, r2, #2
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	005a      	lsls	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	3b01      	subs	r3, #1
 8001f34:	035a      	lsls	r2, r3, #13
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e007      	b.n	8001f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	051a      	lsls	r2, r3, #20
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f92:	025a      	lsls	r2, r3, #9
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	029a      	lsls	r2, r3, #10
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	0f000001 	.word	0x0f000001

08001fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0ed      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f9c8 	bl	8001388 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff fbb4 	bl	8001774 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200e:	e012      	b.n	8002036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002010:	f7ff fbb0 	bl	8001774 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d90b      	bls.n	8002036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0c5      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0e5      	beq.n	8002010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0202 	bic.w	r2, r2, #2
 8002052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7ff fb8e 	bl	8001774 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800205a:	e012      	b.n	8002082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800205c:	f7ff fb8a 	bl	8001774 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b0a      	cmp	r3, #10
 8002068:	d90b      	bls.n	8002082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09f      	b.n	80021c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e5      	bne.n	800205c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7e5b      	ldrb	r3, [r3, #25]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7e9b      	ldrb	r3, [r3, #26]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0220 	bic.w	r2, r2, #32
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7edb      	ldrb	r3, [r3, #27]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0210 	bic.w	r2, r2, #16
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e007      	b.n	8002138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0210 	orr.w	r2, r2, #16
 8002136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7f1b      	ldrb	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0208 	bic.w	r2, r2, #8
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7f5b      	ldrb	r3, [r3, #29]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0204 	orr.w	r2, r2, #4
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e007      	b.n	800218c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d12e      	bne.n	800223c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021f6:	f7ff fabd 	bl	8001774 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021fc:	e012      	b.n	8002224 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021fe:	f7ff fab9 	bl	8001774 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b0a      	cmp	r3, #10
 800220a:	d90b      	bls.n	8002224 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e012      	b.n	800224a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e5      	bne.n	80021fe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	e006      	b.n	800224a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002252:	b480      	push	{r7}
 8002254:	b089      	sub	sp, #36	@ 0x24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002266:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002270:	7ffb      	ldrb	r3, [r7, #31]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <HAL_CAN_AddTxMessage+0x2c>
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	2b02      	cmp	r3, #2
 800227a:	f040 80ad 	bne.w	80023d8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8095 	beq.w	80023c8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	0e1b      	lsrs	r3, r3, #24
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022a8:	2201      	movs	r2, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	409a      	lsls	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	6809      	ldr	r1, [r1, #0]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3318      	adds	r3, #24
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e00f      	b.n	80022f6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3318      	adds	r3, #24
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3318      	adds	r3, #24
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	3304      	adds	r3, #4
 8002308:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	7d1b      	ldrb	r3, [r3, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d111      	bne.n	8002336 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3318      	adds	r3, #24
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3318      	adds	r3, #24
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	3304      	adds	r3, #4
 8002334:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3307      	adds	r3, #7
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3306      	adds	r3, #6
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3305      	adds	r3, #5
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4313      	orrs	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	3204      	adds	r2, #4
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	4610      	mov	r0, r2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	ea43 0200 	orr.w	r2, r3, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800236c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3303      	adds	r3, #3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	061a      	lsls	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3302      	adds	r3, #2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	4313      	orrs	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	4610      	mov	r0, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6811      	ldr	r1, [r2, #0]
 8002394:	ea43 0200 	orr.w	r2, r3, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	440b      	add	r3, r1
 800239e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3318      	adds	r3, #24
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6811      	ldr	r1, [r2, #0]
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3318      	adds	r3, #24
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	440b      	add	r3, r1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e00e      	b.n	80023e6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e006      	b.n	80023e6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff47 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff5c 	bl	800243c <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffb0 	bl	8002514 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e16b      	b.n	80028b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 815a 	bne.w	80028ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d005      	beq.n	8002612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	2b02      	cmp	r3, #2
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d017      	beq.n	80026b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80b4 	beq.w	80028ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b60      	ldr	r3, [pc, #384]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	4a5f      	ldr	r2, [pc, #380]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002754:	6453      	str	r3, [r2, #68]	@ 0x44
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <HAL_GPIO_Init+0x310>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	@ (80028d4 <HAL_GPIO_Init+0x314>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_GPIO_Init+0x318>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a50      	ldr	r2, [pc, #320]	@ (80028dc <HAL_GPIO_Init+0x31c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4f      	ldr	r2, [pc, #316]	@ (80028e0 <HAL_GPIO_Init+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x21a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4e      	ldr	r2, [pc, #312]	@ (80028e4 <HAL_GPIO_Init+0x324>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x216>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_GPIO_Init+0x328>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x212>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	@ (80028f0 <HAL_GPIO_Init+0x330>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x20a>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00e      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ca:	2308      	movs	r3, #8
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	@ (80028d0 <HAL_GPIO_Init+0x310>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a32      	ldr	r2, [pc, #200]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f ae90 	bls.w	80025dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e001      	b.n	800291a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12b      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fd48 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	@ 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f001 fa08 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a81      	ldr	r2, [pc, #516]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a80      	ldr	r2, [pc, #512]	@ (8002bd4 <HAL_I2C_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_I2C_Init+0x27c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0e7      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a78      	ldr	r2, [pc, #480]	@ (8002bdc <HAL_I2C_Init+0x280>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <HAL_I2C_Init+0x284>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	495c      	ldr	r1, [pc, #368]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d819      	bhi.n	8002a98 <HAL_I2C_Init+0x13c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_I2C_Init+0x138>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e59      	subs	r1, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	e051      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x168>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x18e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x196>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7fe fdbc 	bl	8001774 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80e0 	bne.w	8002dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	4970      	ldr	r1, [pc, #448]	@ (8002dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa92 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0d3      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x50>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0cc      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f9ca 	bl	800303c <I2C_MasterRequestWrite>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e08d      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc8:	e066      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb50 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11b      	bne.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fb47 	bl	8003404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01a      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d194      	bne.n	8002cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7fe fcc0 	bl	8001774 <HAL_GetTick>
 8002df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	f040 8111 	bne.w	800302a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2319      	movs	r3, #25
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4988      	ldr	r1, [pc, #544]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f994 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e104      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2C_IsDeviceReady+0x50>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0fd      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d007      	beq.n	8002e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2224      	movs	r2, #36	@ 0x24
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a70      	ldr	r2, [pc, #448]	@ (8003038 <HAL_I2C_IsDeviceReady+0x258>)
 8002e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f952 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb0:	d103      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0b6      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fc51 	bl	8001774 <HAL_GetTick>
 8002ed2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f02:	e025      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7fe fc36 	bl	8001774 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <HAL_I2C_IsDeviceReady+0x13a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	22a0      	movs	r2, #160	@ 0xa0
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f5a:	d005      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f62:	7dbb      	ldrb	r3, [r7, #22]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0cd      	beq.n	8002f04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d129      	bne.n	8002fd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	4921      	ldr	r1, [pc, #132]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8c6 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e036      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e02c      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	490f      	ldr	r1, [pc, #60]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8a2 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e012      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3301      	adds	r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	f4ff af32 	bcc.w	8002e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d006      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d003      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003064:	d108      	bne.n	8003078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e00b      	b.n	8003090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	2b12      	cmp	r3, #18
 800307e:	d107      	bne.n	8003090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f84f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b6:	d103      	bne.n	80030c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e035      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030cc:	d108      	bne.n	80030e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e01b      	b.n	8003118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	11db      	asrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f063 030f 	orn	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	490e      	ldr	r1, [pc, #56]	@ (8003138 <I2C_MasterRequestWrite+0xfc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f898 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e010      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <I2C_MasterRequestWrite+0x100>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f888 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00010008 	.word	0x00010008
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e048      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003158:	d044      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fb0b 	bl	8001774 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d139      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	e00c      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d093      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003242:	e071      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003252:	d123      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e067      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a2:	d041      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fa66 	bl	8001774 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d136      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e021      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10c      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e00b      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af6d 	bne.w	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003398:	d028      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe f9eb 	bl	8001774 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d016      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d1c3      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f83e 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003428:	d028      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe f9a3 	bl	8001774 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d016      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d11b      	bne.n	80034e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e267      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003512:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b85      	ldr	r3, [pc, #532]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003526:	2b08      	cmp	r3, #8
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b82      	ldr	r3, [pc, #520]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b7e      	ldr	r3, [pc, #504]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e242      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b76      	ldr	r3, [pc, #472]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b69      	ldr	r3, [pc, #420]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a68      	ldr	r2, [pc, #416]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe f8e2 	bl	8001774 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe f8de 	bl	8001774 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e207      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe f8ce 	bl	8001774 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe f8ca 	bl	8001774 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	@ 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1f3      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b51      	ldr	r3, [pc, #324]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360a:	4b4a      	ldr	r3, [pc, #296]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <HAL_RCC_OscConfig+0x244>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe f883 	bl	8001774 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe f87f 	bl	8001774 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a8      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCC_OscConfig+0x244>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe f862 	bl	8001774 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe f85e 	bl	8001774 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e187      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x248>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe f842 	bl	8001774 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe f83e 	bl	8001774 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e167      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_OscConfig+0x240>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_OscConfig+0x248>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe f82b 	bl	8001774 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe f827 	bl	8001774 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e150      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b88      	ldr	r3, [pc, #544]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b81      	ldr	r3, [pc, #516]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7d      	ldr	r3, [pc, #500]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	4a7c      	ldr	r2, [pc, #496]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	@ 0x40
 800377a:	4b7a      	ldr	r3, [pc, #488]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b77      	ldr	r3, [pc, #476]	@ (8003968 <HAL_RCC_OscConfig+0x474>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b74      	ldr	r3, [pc, #464]	@ (8003968 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a73      	ldr	r2, [pc, #460]	@ (8003968 <HAL_RCC_OscConfig+0x474>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fd ffe7 	bl	8001774 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fd ffe3 	bl	8001774 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e10c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003968 <HAL_RCC_OscConfig+0x474>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x2ea>
 80037d0:	4b64      	ldr	r3, [pc, #400]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a63      	ldr	r2, [pc, #396]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x30c>
 80037e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 8003800:	4b58      	ldr	r3, [pc, #352]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003804:	4a57      	ldr	r2, [pc, #348]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	@ 0x70
 800380c:	4b55      	ldr	r3, [pc, #340]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	4a54      	ldr	r2, [pc, #336]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd ffa8 	bl	8001774 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd ffa4 	bl	8001774 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0cb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b49      	ldr	r3, [pc, #292]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x334>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fd ff92 	bl	8001774 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fd ff8e 	bl	8001774 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b5      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	4a38      	ldr	r2, [pc, #224]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a1 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d05c      	beq.n	8003958 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d141      	bne.n	800392a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd ff62 	bl	8001774 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd ff5e 	bl	8001774 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e087      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b27      	ldr	r3, [pc, #156]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	491b      	ldr	r1, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x478>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd ff37 	bl	8001774 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd ff33 	bl	8001774 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e05c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x416>
 8003928:	e054      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd ff20 	bl	8001774 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd ff1c 	bl	8001774 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e045      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
 8003956:	e03d      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
 800396c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x4ec>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d028      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d111      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cc      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d90c      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b65      	ldr	r3, [pc, #404]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a52      	ldr	r2, [pc, #328]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e067      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4934      	ldr	r1, [pc, #208]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fd fe4e 	bl	8001774 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fd fe4a 	bl	8001774 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d20c      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b22      	ldr	r3, [pc, #136]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	@ (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fdae 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08005550 	.word	0x08005550
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b094      	sub	sp, #80	@ 0x50
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b79      	ldr	r3, [pc, #484]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80e1 	bhi.w	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e0db      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be8:	e0db      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b73      	ldr	r3, [pc, #460]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bee:	e0d8      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b6a      	ldr	r3, [pc, #424]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	6139      	str	r1, [r7, #16]
 8003c40:	4629      	mov	r1, r5
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	ebb2 0801 	subs.w	r8, r2, r1
 8003c68:	4659      	mov	r1, fp
 8003c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c82:	4690      	mov	r8, r2
 8003c84:	4699      	mov	r9, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	eb18 0303 	adds.w	r3, r8, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	462b      	mov	r3, r5
 8003c90:	eb49 0303 	adc.w	r3, r9, r3
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	024b      	lsls	r3, r1, #9
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cac:	4621      	mov	r1, r4
 8003cae:	024a      	lsls	r2, r1, #9
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cc0:	f7fc fade 	bl	8000280 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ccc:	e058      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b38      	ldr	r3, [pc, #224]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4611      	mov	r1, r2
 8003cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	f04f 0000 	mov.w	r0, #0
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	0159      	lsls	r1, r3, #5
 8003cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfa:	0150      	lsls	r0, r2, #5
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4641      	mov	r1, r8
 8003d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d06:	4649      	mov	r1, r9
 8003d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d20:	ebb2 040a 	subs.w	r4, r2, sl
 8003d24:	eb63 050b 	sbc.w	r5, r3, fp
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	464b      	mov	r3, r9
 8003d44:	eb45 0303 	adc.w	r3, r5, r3
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d56:	4629      	mov	r1, r5
 8003d58:	028b      	lsls	r3, r1, #10
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d60:	4621      	mov	r1, r4
 8003d62:	028a      	lsls	r2, r1, #10
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d74:	f7fc fa84 	bl	8000280 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3750      	adds	r7, #80	@ 0x50
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	007a1200 	.word	0x007a1200

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000000 	.word	0x20000000

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd8:	f7ff fff0 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0a9b      	lsrs	r3, r3, #10
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	@ (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	08005560 	.word	0x08005560

08003dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e041      	b.n	8003e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fb40 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 fb7c 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e046      	b.n	8003f42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <HAL_TIM_Base_Start+0xb4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ece:	d01d      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <HAL_TIM_Base_Start+0xb8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	@ (8003f58 <HAL_TIM_Base_Start+0xbc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <HAL_TIM_Base_Start+0xc0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <HAL_TIM_Base_Start+0xc4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <HAL_TIM_Base_Start+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_Base_Start+0x70>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_TIM_Base_Start+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d010      	beq.n	8003f40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	e007      	b.n	8003f40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40010400 	.word	0x40010400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40001800 	.word	0x40001800

08003f6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e041      	b.n	8004002 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f839 	bl	800400a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fac4 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_IC_Start_IT+0x1e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800403a:	b2db      	uxtb	r3, r3
 800403c:	e013      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x46>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_IC_Start_IT+0x2e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e00b      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x46>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_IC_Start_IT+0x3e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e003      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x46>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_TIM_IC_Start_IT+0x58>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e013      	b.n	80040a0 <HAL_TIM_IC_Start_IT+0x80>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d104      	bne.n	8004088 <HAL_TIM_IC_Start_IT+0x68>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e00b      	b.n	80040a0 <HAL_TIM_IC_Start_IT+0x80>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d104      	bne.n	8004098 <HAL_TIM_IC_Start_IT+0x78>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e003      	b.n	80040a0 <HAL_TIM_IC_Start_IT+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040a2:	7bbb      	ldrb	r3, [r7, #14]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040a8:	7b7b      	ldrb	r3, [r7, #13]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0cc      	b.n	800424c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_IC_Start_IT+0xa2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c0:	e013      	b.n	80040ea <HAL_TIM_IC_Start_IT+0xca>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_IC_Start_IT+0xb2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d0:	e00b      	b.n	80040ea <HAL_TIM_IC_Start_IT+0xca>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_IC_Start_IT+0xc2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e0:	e003      	b.n	80040ea <HAL_TIM_IC_Start_IT+0xca>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_IC_Start_IT+0xda>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f8:	e013      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x102>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d104      	bne.n	800410a <HAL_TIM_IC_Start_IT+0xea>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004108:	e00b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x102>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d104      	bne.n	800411a <HAL_TIM_IC_Start_IT+0xfa>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004118:	e003      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x102>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d841      	bhi.n	80041ac <HAL_TIM_IC_Start_IT+0x18c>
 8004128:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <HAL_TIM_IC_Start_IT+0x110>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004165 	.word	0x08004165
 8004134:	080041ad 	.word	0x080041ad
 8004138:	080041ad 	.word	0x080041ad
 800413c:	080041ad 	.word	0x080041ad
 8004140:	08004177 	.word	0x08004177
 8004144:	080041ad 	.word	0x080041ad
 8004148:	080041ad 	.word	0x080041ad
 800414c:	080041ad 	.word	0x080041ad
 8004150:	08004189 	.word	0x08004189
 8004154:	080041ad 	.word	0x080041ad
 8004158:	080041ad 	.word	0x080041ad
 800415c:	080041ad 	.word	0x080041ad
 8004160:	0800419b 	.word	0x0800419b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0202 	orr.w	r2, r2, #2
 8004172:	60da      	str	r2, [r3, #12]
      break;
 8004174:	e01d      	b.n	80041b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0204 	orr.w	r2, r2, #4
 8004184:	60da      	str	r2, [r3, #12]
      break;
 8004186:	e014      	b.n	80041b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	60da      	str	r2, [r3, #12]
      break;
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0210 	orr.w	r2, r2, #16
 80041a8:	60da      	str	r2, [r3, #12]
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d148      	bne.n	800424a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	6839      	ldr	r1, [r7, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fc29 	bl	8004a18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <HAL_TIM_IC_Start_IT+0x234>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d022      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d01d      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <HAL_TIM_IC_Start_IT+0x238>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d018      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	@ (800425c <HAL_TIM_IC_Start_IT+0x23c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004260 <HAL_TIM_IC_Start_IT+0x240>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <HAL_TIM_IC_Start_IT+0x244>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <HAL_TIM_IC_Start_IT+0x248>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_IC_Start_IT+0x1f6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a16      	ldr	r2, [pc, #88]	@ (800426c <HAL_TIM_IC_Start_IT+0x24c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d111      	bne.n	800423a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d010      	beq.n	800424a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	e007      	b.n	800424a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_TIM_IC_ConfigChannel+0x1e>
 800428a:	2302      	movs	r3, #2
 800428c:	e088      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042ac:	f000 f9f0 	bl	8004690 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020c 	bic.w	r2, r2, #12
 80042be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6999      	ldr	r1, [r3, #24]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e060      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d11c      	bne.n	8004314 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042ea:	f000 fa74 	bl	80047d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	021a      	lsls	r2, r3, #8
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]
 8004312:	e040      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11b      	bne.n	8004352 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800432a:	f000 fac1 	bl	80048b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 020c 	bic.w	r2, r2, #12
 800433c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
 8004350:	e021      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d11c      	bne.n	8004392 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004368:	f000 fade 	bl	8004928 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800437a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69d9      	ldr	r1, [r3, #28]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
 8004390:	e001      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_ConfigClockSource+0x1c>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0b4      	b.n	800452e <HAL_TIM_ConfigClockSource+0x186>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d03e      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xd4>
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004402:	f200 8087 	bhi.w	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440a:	f000 8086 	beq.w	800451a <HAL_TIM_ConfigClockSource+0x172>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d87f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b70      	cmp	r3, #112	@ 0x70
 8004416:	d01a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xa6>
 8004418:	2b70      	cmp	r3, #112	@ 0x70
 800441a:	d87b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b60      	cmp	r3, #96	@ 0x60
 800441e:	d050      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004420:	2b60      	cmp	r3, #96	@ 0x60
 8004422:	d877      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b50      	cmp	r3, #80	@ 0x50
 8004426:	d03c      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004428:	2b50      	cmp	r3, #80	@ 0x50
 800442a:	d873      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	d058      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d86f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b30      	cmp	r3, #48	@ 0x30
 8004436:	d064      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	2b30      	cmp	r3, #48	@ 0x30
 800443a:	d86b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d060      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d867      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004448:	2b10      	cmp	r3, #16
 800444a:	d05a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	e062      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800445e:	f000 fabb 	bl	80049d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	609a      	str	r2, [r3, #8]
      break;
 800447a:	e04f      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448c:	f000 faa4 	bl	80049d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e03c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 f962 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2150      	movs	r1, #80	@ 0x50
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fa71 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 80044c0:	e02c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 f9be 	bl	8004850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2160      	movs	r1, #96	@ 0x60
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fa61 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 80044e0:	e01c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 f942 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2140      	movs	r1, #64	@ 0x40
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa51 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 8004500:	e00c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 fa48 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 8004512:	e003      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      break;
 8004518:	e000      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800451a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a46      	ldr	r2, [pc, #280]	@ (8004664 <TIM_Base_SetConfig+0x12c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004556:	d00f      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a43      	ldr	r2, [pc, #268]	@ (8004668 <TIM_Base_SetConfig+0x130>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a42      	ldr	r2, [pc, #264]	@ (800466c <TIM_Base_SetConfig+0x134>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a41      	ldr	r2, [pc, #260]	@ (8004670 <TIM_Base_SetConfig+0x138>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a40      	ldr	r2, [pc, #256]	@ (8004674 <TIM_Base_SetConfig+0x13c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a35      	ldr	r2, [pc, #212]	@ (8004664 <TIM_Base_SetConfig+0x12c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004598:	d027      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a32      	ldr	r2, [pc, #200]	@ (8004668 <TIM_Base_SetConfig+0x130>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d023      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a31      	ldr	r2, [pc, #196]	@ (800466c <TIM_Base_SetConfig+0x134>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01f      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a30      	ldr	r2, [pc, #192]	@ (8004670 <TIM_Base_SetConfig+0x138>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004674 <TIM_Base_SetConfig+0x13c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d017      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <TIM_Base_SetConfig+0x140>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	@ (800467c <TIM_Base_SetConfig+0x144>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <TIM_Base_SetConfig+0x148>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <TIM_Base_SetConfig+0x14c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004688 <TIM_Base_SetConfig+0x150>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a29      	ldr	r2, [pc, #164]	@ (800468c <TIM_Base_SetConfig+0x154>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a10      	ldr	r2, [pc, #64]	@ (8004664 <TIM_Base_SetConfig+0x12c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_Base_SetConfig+0xf8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <TIM_Base_SetConfig+0x13c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d105      	bne.n	8004656 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]
  }
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40010400 	.word	0x40010400
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800
 8004684:	40001800 	.word	0x40001800
 8004688:	40001c00 	.word	0x40001c00
 800468c:	40002000 	.word	0x40002000

08004690 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0201 	bic.w	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a28      	ldr	r2, [pc, #160]	@ (800475c <TIM_TI1_SetConfig+0xcc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01b      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d017      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a25      	ldr	r2, [pc, #148]	@ (8004760 <TIM_TI1_SetConfig+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a24      	ldr	r2, [pc, #144]	@ (8004764 <TIM_TI1_SetConfig+0xd4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00f      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <TIM_TI1_SetConfig+0xd8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a22      	ldr	r2, [pc, #136]	@ (800476c <TIM_TI1_SetConfig+0xdc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <TIM_TI1_SetConfig+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <TIM_TI1_SetConfig+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <TIM_TI1_SetConfig+0x6a>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <TIM_TI1_SetConfig+0x6c>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e003      	b.n	800471a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	b2db      	uxtb	r3, r3
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f023 030a 	bic.w	r3, r3, #10
 8004734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 030a 	and.w	r3, r3, #10
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40010400 	.word	0x40010400
 8004770:	40014000 	.word	0x40014000
 8004774:	40001800 	.word	0x40001800

08004778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f023 030a 	bic.w	r3, r3, #10
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b087      	sub	sp, #28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0210 	bic.w	r2, r3, #16
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	b29b      	uxth	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0210 	bic.w	r2, r3, #16
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	031b      	lsls	r3, r3, #12
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f023 0303 	bic.w	r3, r3, #3
 80048dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	b29b      	uxth	r3, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800497a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	031b      	lsls	r3, r3, #12
 8004980:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	f043 0307 	orr.w	r3, r3, #7
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1a      	ldr	r2, [r3, #32]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e05a      	b.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac8:	d01d      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a18      	ldr	r2, [pc, #96]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a15      	ldr	r2, [pc, #84]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10c      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <siprintf>:
 8004b5c:	b40e      	push	{r1, r2, r3}
 8004b5e:	b500      	push	{lr}
 8004b60:	b09c      	sub	sp, #112	@ 0x70
 8004b62:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b64:	9002      	str	r0, [sp, #8]
 8004b66:	9006      	str	r0, [sp, #24]
 8004b68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b6c:	4809      	ldr	r0, [pc, #36]	@ (8004b94 <siprintf+0x38>)
 8004b6e:	9107      	str	r1, [sp, #28]
 8004b70:	9104      	str	r1, [sp, #16]
 8004b72:	4909      	ldr	r1, [pc, #36]	@ (8004b98 <siprintf+0x3c>)
 8004b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	a902      	add	r1, sp, #8
 8004b80:	f000 f9b4 	bl	8004eec <_svfiprintf_r>
 8004b84:	9b02      	ldr	r3, [sp, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	b01c      	add	sp, #112	@ 0x70
 8004b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b90:	b003      	add	sp, #12
 8004b92:	4770      	bx	lr
 8004b94:	2000000c 	.word	0x2000000c
 8004b98:	ffff0208 	.word	0xffff0208

08004b9c <_vsiprintf_r>:
 8004b9c:	b500      	push	{lr}
 8004b9e:	b09b      	sub	sp, #108	@ 0x6c
 8004ba0:	9100      	str	r1, [sp, #0]
 8004ba2:	9104      	str	r1, [sp, #16]
 8004ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	9102      	str	r1, [sp, #8]
 8004bac:	4905      	ldr	r1, [pc, #20]	@ (8004bc4 <_vsiprintf_r+0x28>)
 8004bae:	9103      	str	r1, [sp, #12]
 8004bb0:	4669      	mov	r1, sp
 8004bb2:	f000 f99b 	bl	8004eec <_svfiprintf_r>
 8004bb6:	9b00      	ldr	r3, [sp, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	b01b      	add	sp, #108	@ 0x6c
 8004bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc2:	bf00      	nop
 8004bc4:	ffff0208 	.word	0xffff0208

08004bc8 <vsiprintf>:
 8004bc8:	4613      	mov	r3, r2
 8004bca:	460a      	mov	r2, r1
 8004bcc:	4601      	mov	r1, r0
 8004bce:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <vsiprintf+0x10>)
 8004bd0:	6800      	ldr	r0, [r0, #0]
 8004bd2:	f7ff bfe3 	b.w	8004b9c <_vsiprintf_r>
 8004bd6:	bf00      	nop
 8004bd8:	2000000c 	.word	0x2000000c

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__errno>:
 8004bec:	4b01      	ldr	r3, [pc, #4]	@ (8004bf4 <__errno+0x8>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8004c30 <__libc_init_array+0x38>)
 8004bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8004c34 <__libc_init_array+0x3c>)
 8004bfe:	1b64      	subs	r4, r4, r5
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	2600      	movs	r6, #0
 8004c04:	42a6      	cmp	r6, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	4d0b      	ldr	r5, [pc, #44]	@ (8004c38 <__libc_init_array+0x40>)
 8004c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c3c <__libc_init_array+0x44>)
 8004c0c:	f000 fc66 	bl	80054dc <_init>
 8004c10:	1b64      	subs	r4, r4, r5
 8004c12:	10a4      	asrs	r4, r4, #2
 8004c14:	2600      	movs	r6, #0
 8004c16:	42a6      	cmp	r6, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c20:	4798      	blx	r3
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2a:	4798      	blx	r3
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	080055a4 	.word	0x080055a4
 8004c34:	080055a4 	.word	0x080055a4
 8004c38:	080055a4 	.word	0x080055a4
 8004c3c:	080055a8 	.word	0x080055a8

08004c40 <__retarget_lock_acquire_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__retarget_lock_release_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <_free_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4605      	mov	r5, r0
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	d041      	beq.n	8004cd0 <_free_r+0x8c>
 8004c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c50:	1f0c      	subs	r4, r1, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfb8      	it	lt
 8004c56:	18e4      	addlt	r4, r4, r3
 8004c58:	f000 f8e0 	bl	8004e1c <__malloc_lock>
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <_free_r+0x90>)
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	b933      	cbnz	r3, 8004c70 <_free_r+0x2c>
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	6014      	str	r4, [r2, #0]
 8004c66:	4628      	mov	r0, r5
 8004c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c6c:	f000 b8dc 	b.w	8004e28 <__malloc_unlock>
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	d908      	bls.n	8004c86 <_free_r+0x42>
 8004c74:	6820      	ldr	r0, [r4, #0]
 8004c76:	1821      	adds	r1, r4, r0
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	bf01      	itttt	eq
 8004c7c:	6819      	ldreq	r1, [r3, #0]
 8004c7e:	685b      	ldreq	r3, [r3, #4]
 8004c80:	1809      	addeq	r1, r1, r0
 8004c82:	6021      	streq	r1, [r4, #0]
 8004c84:	e7ed      	b.n	8004c62 <_free_r+0x1e>
 8004c86:	461a      	mov	r2, r3
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b10b      	cbz	r3, 8004c90 <_free_r+0x4c>
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	d9fa      	bls.n	8004c86 <_free_r+0x42>
 8004c90:	6811      	ldr	r1, [r2, #0]
 8004c92:	1850      	adds	r0, r2, r1
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d10b      	bne.n	8004cb0 <_free_r+0x6c>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	4401      	add	r1, r0
 8004c9c:	1850      	adds	r0, r2, r1
 8004c9e:	4283      	cmp	r3, r0
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	d1e0      	bne.n	8004c66 <_free_r+0x22>
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	6053      	str	r3, [r2, #4]
 8004caa:	4408      	add	r0, r1
 8004cac:	6010      	str	r0, [r2, #0]
 8004cae:	e7da      	b.n	8004c66 <_free_r+0x22>
 8004cb0:	d902      	bls.n	8004cb8 <_free_r+0x74>
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	602b      	str	r3, [r5, #0]
 8004cb6:	e7d6      	b.n	8004c66 <_free_r+0x22>
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	1821      	adds	r1, r4, r0
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf04      	itt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	bf04      	itt	eq
 8004cc8:	1809      	addeq	r1, r1, r0
 8004cca:	6021      	streq	r1, [r4, #0]
 8004ccc:	6054      	str	r4, [r2, #4]
 8004cce:	e7ca      	b.n	8004c66 <_free_r+0x22>
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200003b4 	.word	0x200003b4

08004cd8 <sbrk_aligned>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4e0f      	ldr	r6, [pc, #60]	@ (8004d18 <sbrk_aligned+0x40>)
 8004cdc:	460c      	mov	r4, r1
 8004cde:	6831      	ldr	r1, [r6, #0]
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	b911      	cbnz	r1, 8004cea <sbrk_aligned+0x12>
 8004ce4:	f000 fba6 	bl	8005434 <_sbrk_r>
 8004ce8:	6030      	str	r0, [r6, #0]
 8004cea:	4621      	mov	r1, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f000 fba1 	bl	8005434 <_sbrk_r>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	d103      	bne.n	8004cfe <sbrk_aligned+0x26>
 8004cf6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	1cc4      	adds	r4, r0, #3
 8004d00:	f024 0403 	bic.w	r4, r4, #3
 8004d04:	42a0      	cmp	r0, r4
 8004d06:	d0f8      	beq.n	8004cfa <sbrk_aligned+0x22>
 8004d08:	1a21      	subs	r1, r4, r0
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fb92 	bl	8005434 <_sbrk_r>
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1f2      	bne.n	8004cfa <sbrk_aligned+0x22>
 8004d14:	e7ef      	b.n	8004cf6 <sbrk_aligned+0x1e>
 8004d16:	bf00      	nop
 8004d18:	200003b0 	.word	0x200003b0

08004d1c <_malloc_r>:
 8004d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d20:	1ccd      	adds	r5, r1, #3
 8004d22:	f025 0503 	bic.w	r5, r5, #3
 8004d26:	3508      	adds	r5, #8
 8004d28:	2d0c      	cmp	r5, #12
 8004d2a:	bf38      	it	cc
 8004d2c:	250c      	movcc	r5, #12
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	4606      	mov	r6, r0
 8004d32:	db01      	blt.n	8004d38 <_malloc_r+0x1c>
 8004d34:	42a9      	cmp	r1, r5
 8004d36:	d904      	bls.n	8004d42 <_malloc_r+0x26>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e18 <_malloc_r+0xfc>
 8004d46:	f000 f869 	bl	8004e1c <__malloc_lock>
 8004d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4e:	461c      	mov	r4, r3
 8004d50:	bb44      	cbnz	r4, 8004da4 <_malloc_r+0x88>
 8004d52:	4629      	mov	r1, r5
 8004d54:	4630      	mov	r0, r6
 8004d56:	f7ff ffbf 	bl	8004cd8 <sbrk_aligned>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	d158      	bne.n	8004e12 <_malloc_r+0xf6>
 8004d60:	f8d8 4000 	ldr.w	r4, [r8]
 8004d64:	4627      	mov	r7, r4
 8004d66:	2f00      	cmp	r7, #0
 8004d68:	d143      	bne.n	8004df2 <_malloc_r+0xd6>
 8004d6a:	2c00      	cmp	r4, #0
 8004d6c:	d04b      	beq.n	8004e06 <_malloc_r+0xea>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	4639      	mov	r1, r7
 8004d72:	4630      	mov	r0, r6
 8004d74:	eb04 0903 	add.w	r9, r4, r3
 8004d78:	f000 fb5c 	bl	8005434 <_sbrk_r>
 8004d7c:	4581      	cmp	r9, r0
 8004d7e:	d142      	bne.n	8004e06 <_malloc_r+0xea>
 8004d80:	6821      	ldr	r1, [r4, #0]
 8004d82:	1a6d      	subs	r5, r5, r1
 8004d84:	4629      	mov	r1, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7ff ffa6 	bl	8004cd8 <sbrk_aligned>
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d03a      	beq.n	8004e06 <_malloc_r+0xea>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	442b      	add	r3, r5
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	f8d8 3000 	ldr.w	r3, [r8]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	bb62      	cbnz	r2, 8004df8 <_malloc_r+0xdc>
 8004d9e:	f8c8 7000 	str.w	r7, [r8]
 8004da2:	e00f      	b.n	8004dc4 <_malloc_r+0xa8>
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	1b52      	subs	r2, r2, r5
 8004da8:	d420      	bmi.n	8004dec <_malloc_r+0xd0>
 8004daa:	2a0b      	cmp	r2, #11
 8004dac:	d917      	bls.n	8004dde <_malloc_r+0xc2>
 8004dae:	1961      	adds	r1, r4, r5
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	6025      	str	r5, [r4, #0]
 8004db4:	bf18      	it	ne
 8004db6:	6059      	strne	r1, [r3, #4]
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	bf08      	it	eq
 8004dbc:	f8c8 1000 	streq.w	r1, [r8]
 8004dc0:	5162      	str	r2, [r4, r5]
 8004dc2:	604b      	str	r3, [r1, #4]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f82f 	bl	8004e28 <__malloc_unlock>
 8004dca:	f104 000b 	add.w	r0, r4, #11
 8004dce:	1d23      	adds	r3, r4, #4
 8004dd0:	f020 0007 	bic.w	r0, r0, #7
 8004dd4:	1ac2      	subs	r2, r0, r3
 8004dd6:	bf1c      	itt	ne
 8004dd8:	1a1b      	subne	r3, r3, r0
 8004dda:	50a3      	strne	r3, [r4, r2]
 8004ddc:	e7af      	b.n	8004d3e <_malloc_r+0x22>
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	bf0c      	ite	eq
 8004de4:	f8c8 2000 	streq.w	r2, [r8]
 8004de8:	605a      	strne	r2, [r3, #4]
 8004dea:	e7eb      	b.n	8004dc4 <_malloc_r+0xa8>
 8004dec:	4623      	mov	r3, r4
 8004dee:	6864      	ldr	r4, [r4, #4]
 8004df0:	e7ae      	b.n	8004d50 <_malloc_r+0x34>
 8004df2:	463c      	mov	r4, r7
 8004df4:	687f      	ldr	r7, [r7, #4]
 8004df6:	e7b6      	b.n	8004d66 <_malloc_r+0x4a>
 8004df8:	461a      	mov	r2, r3
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d1fb      	bne.n	8004df8 <_malloc_r+0xdc>
 8004e00:	2300      	movs	r3, #0
 8004e02:	6053      	str	r3, [r2, #4]
 8004e04:	e7de      	b.n	8004dc4 <_malloc_r+0xa8>
 8004e06:	230c      	movs	r3, #12
 8004e08:	6033      	str	r3, [r6, #0]
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 f80c 	bl	8004e28 <__malloc_unlock>
 8004e10:	e794      	b.n	8004d3c <_malloc_r+0x20>
 8004e12:	6005      	str	r5, [r0, #0]
 8004e14:	e7d6      	b.n	8004dc4 <_malloc_r+0xa8>
 8004e16:	bf00      	nop
 8004e18:	200003b4 	.word	0x200003b4

08004e1c <__malloc_lock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	@ (8004e24 <__malloc_lock+0x8>)
 8004e1e:	f7ff bf0f 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004e22:	bf00      	nop
 8004e24:	200003ac 	.word	0x200003ac

08004e28 <__malloc_unlock>:
 8004e28:	4801      	ldr	r0, [pc, #4]	@ (8004e30 <__malloc_unlock+0x8>)
 8004e2a:	f7ff bf0a 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004e2e:	bf00      	nop
 8004e30:	200003ac 	.word	0x200003ac

08004e34 <__ssputs_r>:
 8004e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e38:	688e      	ldr	r6, [r1, #8]
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	42be      	cmp	r6, r7
 8004e3e:	680b      	ldr	r3, [r1, #0]
 8004e40:	4682      	mov	sl, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	4690      	mov	r8, r2
 8004e46:	d82d      	bhi.n	8004ea4 <__ssputs_r+0x70>
 8004e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e50:	d026      	beq.n	8004ea0 <__ssputs_r+0x6c>
 8004e52:	6965      	ldr	r5, [r4, #20]
 8004e54:	6909      	ldr	r1, [r1, #16]
 8004e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e5a:	eba3 0901 	sub.w	r9, r3, r1
 8004e5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e62:	1c7b      	adds	r3, r7, #1
 8004e64:	444b      	add	r3, r9
 8004e66:	106d      	asrs	r5, r5, #1
 8004e68:	429d      	cmp	r5, r3
 8004e6a:	bf38      	it	cc
 8004e6c:	461d      	movcc	r5, r3
 8004e6e:	0553      	lsls	r3, r2, #21
 8004e70:	d527      	bpl.n	8004ec2 <__ssputs_r+0x8e>
 8004e72:	4629      	mov	r1, r5
 8004e74:	f7ff ff52 	bl	8004d1c <_malloc_r>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	b360      	cbz	r0, 8004ed6 <__ssputs_r+0xa2>
 8004e7c:	6921      	ldr	r1, [r4, #16]
 8004e7e:	464a      	mov	r2, r9
 8004e80:	f000 fae8 	bl	8005454 <memcpy>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	6126      	str	r6, [r4, #16]
 8004e92:	6165      	str	r5, [r4, #20]
 8004e94:	444e      	add	r6, r9
 8004e96:	eba5 0509 	sub.w	r5, r5, r9
 8004e9a:	6026      	str	r6, [r4, #0]
 8004e9c:	60a5      	str	r5, [r4, #8]
 8004e9e:	463e      	mov	r6, r7
 8004ea0:	42be      	cmp	r6, r7
 8004ea2:	d900      	bls.n	8004ea6 <__ssputs_r+0x72>
 8004ea4:	463e      	mov	r6, r7
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	4641      	mov	r1, r8
 8004eac:	f000 faa8 	bl	8005400 <memmove>
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	1b9b      	subs	r3, r3, r6
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	4433      	add	r3, r6
 8004eba:	6023      	str	r3, [r4, #0]
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	f000 fad4 	bl	8005470 <_realloc_r>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1e0      	bne.n	8004e90 <__ssputs_r+0x5c>
 8004ece:	6921      	ldr	r1, [r4, #16]
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	f7ff feb7 	bl	8004c44 <_free_r>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	f8ca 3000 	str.w	r3, [sl]
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ee8:	e7e9      	b.n	8004ebe <__ssputs_r+0x8a>
	...

08004eec <_svfiprintf_r>:
 8004eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef0:	4698      	mov	r8, r3
 8004ef2:	898b      	ldrh	r3, [r1, #12]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	b09d      	sub	sp, #116	@ 0x74
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460d      	mov	r5, r1
 8004efc:	4614      	mov	r4, r2
 8004efe:	d510      	bpl.n	8004f22 <_svfiprintf_r+0x36>
 8004f00:	690b      	ldr	r3, [r1, #16]
 8004f02:	b973      	cbnz	r3, 8004f22 <_svfiprintf_r+0x36>
 8004f04:	2140      	movs	r1, #64	@ 0x40
 8004f06:	f7ff ff09 	bl	8004d1c <_malloc_r>
 8004f0a:	6028      	str	r0, [r5, #0]
 8004f0c:	6128      	str	r0, [r5, #16]
 8004f0e:	b930      	cbnz	r0, 8004f1e <_svfiprintf_r+0x32>
 8004f10:	230c      	movs	r3, #12
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f18:	b01d      	add	sp, #116	@ 0x74
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	2340      	movs	r3, #64	@ 0x40
 8004f20:	616b      	str	r3, [r5, #20]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f26:	2320      	movs	r3, #32
 8004f28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f30:	2330      	movs	r3, #48	@ 0x30
 8004f32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050d0 <_svfiprintf_r+0x1e4>
 8004f36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f3a:	f04f 0901 	mov.w	r9, #1
 8004f3e:	4623      	mov	r3, r4
 8004f40:	469a      	mov	sl, r3
 8004f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f46:	b10a      	cbz	r2, 8004f4c <_svfiprintf_r+0x60>
 8004f48:	2a25      	cmp	r2, #37	@ 0x25
 8004f4a:	d1f9      	bne.n	8004f40 <_svfiprintf_r+0x54>
 8004f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f50:	d00b      	beq.n	8004f6a <_svfiprintf_r+0x7e>
 8004f52:	465b      	mov	r3, fp
 8004f54:	4622      	mov	r2, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ff6b 	bl	8004e34 <__ssputs_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f000 80a7 	beq.w	80050b2 <_svfiprintf_r+0x1c6>
 8004f64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f66:	445a      	add	r2, fp
 8004f68:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 809f 	beq.w	80050b2 <_svfiprintf_r+0x1c6>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7e:	f10a 0a01 	add.w	sl, sl, #1
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	9307      	str	r3, [sp, #28]
 8004f86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f8c:	4654      	mov	r4, sl
 8004f8e:	2205      	movs	r2, #5
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	484e      	ldr	r0, [pc, #312]	@ (80050d0 <_svfiprintf_r+0x1e4>)
 8004f96:	f7fb f923 	bl	80001e0 <memchr>
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	b9d8      	cbnz	r0, 8004fd6 <_svfiprintf_r+0xea>
 8004f9e:	06d0      	lsls	r0, r2, #27
 8004fa0:	bf44      	itt	mi
 8004fa2:	2320      	movmi	r3, #32
 8004fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fa8:	0711      	lsls	r1, r2, #28
 8004faa:	bf44      	itt	mi
 8004fac:	232b      	movmi	r3, #43	@ 0x2b
 8004fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb8:	d015      	beq.n	8004fe6 <_svfiprintf_r+0xfa>
 8004fba:	9a07      	ldr	r2, [sp, #28]
 8004fbc:	4654      	mov	r4, sl
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f04f 0c0a 	mov.w	ip, #10
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fca:	3b30      	subs	r3, #48	@ 0x30
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d94b      	bls.n	8005068 <_svfiprintf_r+0x17c>
 8004fd0:	b1b0      	cbz	r0, 8005000 <_svfiprintf_r+0x114>
 8004fd2:	9207      	str	r2, [sp, #28]
 8004fd4:	e014      	b.n	8005000 <_svfiprintf_r+0x114>
 8004fd6:	eba0 0308 	sub.w	r3, r0, r8
 8004fda:	fa09 f303 	lsl.w	r3, r9, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	46a2      	mov	sl, r4
 8004fe4:	e7d2      	b.n	8004f8c <_svfiprintf_r+0xa0>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	1d19      	adds	r1, r3, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	9103      	str	r1, [sp, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfbb      	ittet	lt
 8004ff2:	425b      	neglt	r3, r3
 8004ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff8:	9307      	strge	r3, [sp, #28]
 8004ffa:	9307      	strlt	r3, [sp, #28]
 8004ffc:	bfb8      	it	lt
 8004ffe:	9204      	strlt	r2, [sp, #16]
 8005000:	7823      	ldrb	r3, [r4, #0]
 8005002:	2b2e      	cmp	r3, #46	@ 0x2e
 8005004:	d10a      	bne.n	800501c <_svfiprintf_r+0x130>
 8005006:	7863      	ldrb	r3, [r4, #1]
 8005008:	2b2a      	cmp	r3, #42	@ 0x2a
 800500a:	d132      	bne.n	8005072 <_svfiprintf_r+0x186>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	9203      	str	r2, [sp, #12]
 8005014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005018:	3402      	adds	r4, #2
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050e0 <_svfiprintf_r+0x1f4>
 8005020:	7821      	ldrb	r1, [r4, #0]
 8005022:	2203      	movs	r2, #3
 8005024:	4650      	mov	r0, sl
 8005026:	f7fb f8db 	bl	80001e0 <memchr>
 800502a:	b138      	cbz	r0, 800503c <_svfiprintf_r+0x150>
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	eba0 000a 	sub.w	r0, r0, sl
 8005032:	2240      	movs	r2, #64	@ 0x40
 8005034:	4082      	lsls	r2, r0
 8005036:	4313      	orrs	r3, r2
 8005038:	3401      	adds	r4, #1
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005040:	4824      	ldr	r0, [pc, #144]	@ (80050d4 <_svfiprintf_r+0x1e8>)
 8005042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005046:	2206      	movs	r2, #6
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	2800      	cmp	r0, #0
 800504e:	d036      	beq.n	80050be <_svfiprintf_r+0x1d2>
 8005050:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <_svfiprintf_r+0x1ec>)
 8005052:	bb1b      	cbnz	r3, 800509c <_svfiprintf_r+0x1b0>
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	3307      	adds	r3, #7
 8005058:	f023 0307 	bic.w	r3, r3, #7
 800505c:	3308      	adds	r3, #8
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005062:	4433      	add	r3, r6
 8005064:	9309      	str	r3, [sp, #36]	@ 0x24
 8005066:	e76a      	b.n	8004f3e <_svfiprintf_r+0x52>
 8005068:	fb0c 3202 	mla	r2, ip, r2, r3
 800506c:	460c      	mov	r4, r1
 800506e:	2001      	movs	r0, #1
 8005070:	e7a8      	b.n	8004fc4 <_svfiprintf_r+0xd8>
 8005072:	2300      	movs	r3, #0
 8005074:	3401      	adds	r4, #1
 8005076:	9305      	str	r3, [sp, #20]
 8005078:	4619      	mov	r1, r3
 800507a:	f04f 0c0a 	mov.w	ip, #10
 800507e:	4620      	mov	r0, r4
 8005080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005084:	3a30      	subs	r2, #48	@ 0x30
 8005086:	2a09      	cmp	r2, #9
 8005088:	d903      	bls.n	8005092 <_svfiprintf_r+0x1a6>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0c6      	beq.n	800501c <_svfiprintf_r+0x130>
 800508e:	9105      	str	r1, [sp, #20]
 8005090:	e7c4      	b.n	800501c <_svfiprintf_r+0x130>
 8005092:	fb0c 2101 	mla	r1, ip, r1, r2
 8005096:	4604      	mov	r4, r0
 8005098:	2301      	movs	r3, #1
 800509a:	e7f0      	b.n	800507e <_svfiprintf_r+0x192>
 800509c:	ab03      	add	r3, sp, #12
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <_svfiprintf_r+0x1f0>)
 80050a4:	a904      	add	r1, sp, #16
 80050a6:	4638      	mov	r0, r7
 80050a8:	f3af 8000 	nop.w
 80050ac:	1c42      	adds	r2, r0, #1
 80050ae:	4606      	mov	r6, r0
 80050b0:	d1d6      	bne.n	8005060 <_svfiprintf_r+0x174>
 80050b2:	89ab      	ldrh	r3, [r5, #12]
 80050b4:	065b      	lsls	r3, r3, #25
 80050b6:	f53f af2d 	bmi.w	8004f14 <_svfiprintf_r+0x28>
 80050ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050bc:	e72c      	b.n	8004f18 <_svfiprintf_r+0x2c>
 80050be:	ab03      	add	r3, sp, #12
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	462a      	mov	r2, r5
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <_svfiprintf_r+0x1f0>)
 80050c6:	a904      	add	r1, sp, #16
 80050c8:	4638      	mov	r0, r7
 80050ca:	f000 f879 	bl	80051c0 <_printf_i>
 80050ce:	e7ed      	b.n	80050ac <_svfiprintf_r+0x1c0>
 80050d0:	08005568 	.word	0x08005568
 80050d4:	08005572 	.word	0x08005572
 80050d8:	00000000 	.word	0x00000000
 80050dc:	08004e35 	.word	0x08004e35
 80050e0:	0800556e 	.word	0x0800556e

080050e4 <_printf_common>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	4616      	mov	r6, r2
 80050ea:	4698      	mov	r8, r3
 80050ec:	688a      	ldr	r2, [r1, #8]
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfb8      	it	lt
 80050f8:	4613      	movlt	r3, r2
 80050fa:	6033      	str	r3, [r6, #0]
 80050fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005100:	4607      	mov	r7, r0
 8005102:	460c      	mov	r4, r1
 8005104:	b10a      	cbz	r2, 800510a <_printf_common+0x26>
 8005106:	3301      	adds	r3, #1
 8005108:	6033      	str	r3, [r6, #0]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	0699      	lsls	r1, r3, #26
 800510e:	bf42      	ittt	mi
 8005110:	6833      	ldrmi	r3, [r6, #0]
 8005112:	3302      	addmi	r3, #2
 8005114:	6033      	strmi	r3, [r6, #0]
 8005116:	6825      	ldr	r5, [r4, #0]
 8005118:	f015 0506 	ands.w	r5, r5, #6
 800511c:	d106      	bne.n	800512c <_printf_common+0x48>
 800511e:	f104 0a19 	add.w	sl, r4, #25
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	6832      	ldr	r2, [r6, #0]
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	42ab      	cmp	r3, r5
 800512a:	dc26      	bgt.n	800517a <_printf_common+0x96>
 800512c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	3b00      	subs	r3, #0
 8005134:	bf18      	it	ne
 8005136:	2301      	movne	r3, #1
 8005138:	0692      	lsls	r2, r2, #26
 800513a:	d42b      	bmi.n	8005194 <_printf_common+0xb0>
 800513c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005140:	4641      	mov	r1, r8
 8005142:	4638      	mov	r0, r7
 8005144:	47c8      	blx	r9
 8005146:	3001      	adds	r0, #1
 8005148:	d01e      	beq.n	8005188 <_printf_common+0xa4>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	f003 0306 	and.w	r3, r3, #6
 8005152:	2b04      	cmp	r3, #4
 8005154:	bf02      	ittt	eq
 8005156:	68e5      	ldreq	r5, [r4, #12]
 8005158:	6833      	ldreq	r3, [r6, #0]
 800515a:	1aed      	subeq	r5, r5, r3
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	bf0c      	ite	eq
 8005160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005164:	2500      	movne	r5, #0
 8005166:	4293      	cmp	r3, r2
 8005168:	bfc4      	itt	gt
 800516a:	1a9b      	subgt	r3, r3, r2
 800516c:	18ed      	addgt	r5, r5, r3
 800516e:	2600      	movs	r6, #0
 8005170:	341a      	adds	r4, #26
 8005172:	42b5      	cmp	r5, r6
 8005174:	d11a      	bne.n	80051ac <_printf_common+0xc8>
 8005176:	2000      	movs	r0, #0
 8005178:	e008      	b.n	800518c <_printf_common+0xa8>
 800517a:	2301      	movs	r3, #1
 800517c:	4652      	mov	r2, sl
 800517e:	4641      	mov	r1, r8
 8005180:	4638      	mov	r0, r7
 8005182:	47c8      	blx	r9
 8005184:	3001      	adds	r0, #1
 8005186:	d103      	bne.n	8005190 <_printf_common+0xac>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800518c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005190:	3501      	adds	r5, #1
 8005192:	e7c6      	b.n	8005122 <_printf_common+0x3e>
 8005194:	18e1      	adds	r1, r4, r3
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	2030      	movs	r0, #48	@ 0x30
 800519a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800519e:	4422      	add	r2, r4
 80051a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051a8:	3302      	adds	r3, #2
 80051aa:	e7c7      	b.n	800513c <_printf_common+0x58>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4622      	mov	r2, r4
 80051b0:	4641      	mov	r1, r8
 80051b2:	4638      	mov	r0, r7
 80051b4:	47c8      	blx	r9
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0e6      	beq.n	8005188 <_printf_common+0xa4>
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7d9      	b.n	8005172 <_printf_common+0x8e>
	...

080051c0 <_printf_i>:
 80051c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	7e0f      	ldrb	r7, [r1, #24]
 80051c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051c8:	2f78      	cmp	r7, #120	@ 0x78
 80051ca:	4691      	mov	r9, r2
 80051cc:	4680      	mov	r8, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	469a      	mov	sl, r3
 80051d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051d6:	d807      	bhi.n	80051e8 <_printf_i+0x28>
 80051d8:	2f62      	cmp	r7, #98	@ 0x62
 80051da:	d80a      	bhi.n	80051f2 <_printf_i+0x32>
 80051dc:	2f00      	cmp	r7, #0
 80051de:	f000 80d2 	beq.w	8005386 <_printf_i+0x1c6>
 80051e2:	2f58      	cmp	r7, #88	@ 0x58
 80051e4:	f000 80b9 	beq.w	800535a <_printf_i+0x19a>
 80051e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051f0:	e03a      	b.n	8005268 <_printf_i+0xa8>
 80051f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051f6:	2b15      	cmp	r3, #21
 80051f8:	d8f6      	bhi.n	80051e8 <_printf_i+0x28>
 80051fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005200 <_printf_i+0x40>)
 80051fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005200:	08005259 	.word	0x08005259
 8005204:	0800526d 	.word	0x0800526d
 8005208:	080051e9 	.word	0x080051e9
 800520c:	080051e9 	.word	0x080051e9
 8005210:	080051e9 	.word	0x080051e9
 8005214:	080051e9 	.word	0x080051e9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051e9 	.word	0x080051e9
 8005220:	080051e9 	.word	0x080051e9
 8005224:	080051e9 	.word	0x080051e9
 8005228:	080051e9 	.word	0x080051e9
 800522c:	0800536d 	.word	0x0800536d
 8005230:	08005297 	.word	0x08005297
 8005234:	08005327 	.word	0x08005327
 8005238:	080051e9 	.word	0x080051e9
 800523c:	080051e9 	.word	0x080051e9
 8005240:	0800538f 	.word	0x0800538f
 8005244:	080051e9 	.word	0x080051e9
 8005248:	08005297 	.word	0x08005297
 800524c:	080051e9 	.word	0x080051e9
 8005250:	080051e9 	.word	0x080051e9
 8005254:	0800532f 	.word	0x0800532f
 8005258:	6833      	ldr	r3, [r6, #0]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6032      	str	r2, [r6, #0]
 8005260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005268:	2301      	movs	r3, #1
 800526a:	e09d      	b.n	80053a8 <_printf_i+0x1e8>
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	6820      	ldr	r0, [r4, #0]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	6031      	str	r1, [r6, #0]
 8005274:	0606      	lsls	r6, r0, #24
 8005276:	d501      	bpl.n	800527c <_printf_i+0xbc>
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	e003      	b.n	8005284 <_printf_i+0xc4>
 800527c:	0645      	lsls	r5, r0, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0xb8>
 8005280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005284:	2d00      	cmp	r5, #0
 8005286:	da03      	bge.n	8005290 <_printf_i+0xd0>
 8005288:	232d      	movs	r3, #45	@ 0x2d
 800528a:	426d      	negs	r5, r5
 800528c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005290:	4859      	ldr	r0, [pc, #356]	@ (80053f8 <_printf_i+0x238>)
 8005292:	230a      	movs	r3, #10
 8005294:	e011      	b.n	80052ba <_printf_i+0xfa>
 8005296:	6821      	ldr	r1, [r4, #0]
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	0608      	lsls	r0, r1, #24
 800529c:	f853 5b04 	ldr.w	r5, [r3], #4
 80052a0:	d402      	bmi.n	80052a8 <_printf_i+0xe8>
 80052a2:	0649      	lsls	r1, r1, #25
 80052a4:	bf48      	it	mi
 80052a6:	b2ad      	uxthmi	r5, r5
 80052a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052aa:	4853      	ldr	r0, [pc, #332]	@ (80053f8 <_printf_i+0x238>)
 80052ac:	6033      	str	r3, [r6, #0]
 80052ae:	bf14      	ite	ne
 80052b0:	230a      	movne	r3, #10
 80052b2:	2308      	moveq	r3, #8
 80052b4:	2100      	movs	r1, #0
 80052b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ba:	6866      	ldr	r6, [r4, #4]
 80052bc:	60a6      	str	r6, [r4, #8]
 80052be:	2e00      	cmp	r6, #0
 80052c0:	bfa2      	ittt	ge
 80052c2:	6821      	ldrge	r1, [r4, #0]
 80052c4:	f021 0104 	bicge.w	r1, r1, #4
 80052c8:	6021      	strge	r1, [r4, #0]
 80052ca:	b90d      	cbnz	r5, 80052d0 <_printf_i+0x110>
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	d04b      	beq.n	8005368 <_printf_i+0x1a8>
 80052d0:	4616      	mov	r6, r2
 80052d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80052d6:	fb03 5711 	mls	r7, r3, r1, r5
 80052da:	5dc7      	ldrb	r7, [r0, r7]
 80052dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052e0:	462f      	mov	r7, r5
 80052e2:	42bb      	cmp	r3, r7
 80052e4:	460d      	mov	r5, r1
 80052e6:	d9f4      	bls.n	80052d2 <_printf_i+0x112>
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d10b      	bne.n	8005304 <_printf_i+0x144>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	07df      	lsls	r7, r3, #31
 80052f0:	d508      	bpl.n	8005304 <_printf_i+0x144>
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	6861      	ldr	r1, [r4, #4]
 80052f6:	4299      	cmp	r1, r3
 80052f8:	bfde      	ittt	le
 80052fa:	2330      	movle	r3, #48	@ 0x30
 80052fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005300:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005304:	1b92      	subs	r2, r2, r6
 8005306:	6122      	str	r2, [r4, #16]
 8005308:	f8cd a000 	str.w	sl, [sp]
 800530c:	464b      	mov	r3, r9
 800530e:	aa03      	add	r2, sp, #12
 8005310:	4621      	mov	r1, r4
 8005312:	4640      	mov	r0, r8
 8005314:	f7ff fee6 	bl	80050e4 <_printf_common>
 8005318:	3001      	adds	r0, #1
 800531a:	d14a      	bne.n	80053b2 <_printf_i+0x1f2>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005320:	b004      	add	sp, #16
 8005322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f043 0320 	orr.w	r3, r3, #32
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	4833      	ldr	r0, [pc, #204]	@ (80053fc <_printf_i+0x23c>)
 8005330:	2778      	movs	r7, #120	@ 0x78
 8005332:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	6831      	ldr	r1, [r6, #0]
 800533a:	061f      	lsls	r7, r3, #24
 800533c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005340:	d402      	bmi.n	8005348 <_printf_i+0x188>
 8005342:	065f      	lsls	r7, r3, #25
 8005344:	bf48      	it	mi
 8005346:	b2ad      	uxthmi	r5, r5
 8005348:	6031      	str	r1, [r6, #0]
 800534a:	07d9      	lsls	r1, r3, #31
 800534c:	bf44      	itt	mi
 800534e:	f043 0320 	orrmi.w	r3, r3, #32
 8005352:	6023      	strmi	r3, [r4, #0]
 8005354:	b11d      	cbz	r5, 800535e <_printf_i+0x19e>
 8005356:	2310      	movs	r3, #16
 8005358:	e7ac      	b.n	80052b4 <_printf_i+0xf4>
 800535a:	4827      	ldr	r0, [pc, #156]	@ (80053f8 <_printf_i+0x238>)
 800535c:	e7e9      	b.n	8005332 <_printf_i+0x172>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	f023 0320 	bic.w	r3, r3, #32
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	e7f6      	b.n	8005356 <_printf_i+0x196>
 8005368:	4616      	mov	r6, r2
 800536a:	e7bd      	b.n	80052e8 <_printf_i+0x128>
 800536c:	6833      	ldr	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	6961      	ldr	r1, [r4, #20]
 8005372:	1d18      	adds	r0, r3, #4
 8005374:	6030      	str	r0, [r6, #0]
 8005376:	062e      	lsls	r6, r5, #24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	d501      	bpl.n	8005380 <_printf_i+0x1c0>
 800537c:	6019      	str	r1, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0x1c6>
 8005380:	0668      	lsls	r0, r5, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0x1bc>
 8005384:	8019      	strh	r1, [r3, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	4616      	mov	r6, r2
 800538c:	e7bc      	b.n	8005308 <_printf_i+0x148>
 800538e:	6833      	ldr	r3, [r6, #0]
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	6032      	str	r2, [r6, #0]
 8005394:	681e      	ldr	r6, [r3, #0]
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	2100      	movs	r1, #0
 800539a:	4630      	mov	r0, r6
 800539c:	f7fa ff20 	bl	80001e0 <memchr>
 80053a0:	b108      	cbz	r0, 80053a6 <_printf_i+0x1e6>
 80053a2:	1b80      	subs	r0, r0, r6
 80053a4:	6060      	str	r0, [r4, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b0:	e7aa      	b.n	8005308 <_printf_i+0x148>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	47d0      	blx	sl
 80053bc:	3001      	adds	r0, #1
 80053be:	d0ad      	beq.n	800531c <_printf_i+0x15c>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d413      	bmi.n	80053ee <_printf_i+0x22e>
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	4298      	cmp	r0, r3
 80053cc:	bfb8      	it	lt
 80053ce:	4618      	movlt	r0, r3
 80053d0:	e7a6      	b.n	8005320 <_printf_i+0x160>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d09d      	beq.n	800531c <_printf_i+0x15c>
 80053e0:	3501      	adds	r5, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dcf2      	bgt.n	80053d2 <_printf_i+0x212>
 80053ec:	e7eb      	b.n	80053c6 <_printf_i+0x206>
 80053ee:	2500      	movs	r5, #0
 80053f0:	f104 0619 	add.w	r6, r4, #25
 80053f4:	e7f5      	b.n	80053e2 <_printf_i+0x222>
 80053f6:	bf00      	nop
 80053f8:	08005579 	.word	0x08005579
 80053fc:	0800558a 	.word	0x0800558a

08005400 <memmove>:
 8005400:	4288      	cmp	r0, r1
 8005402:	b510      	push	{r4, lr}
 8005404:	eb01 0402 	add.w	r4, r1, r2
 8005408:	d902      	bls.n	8005410 <memmove+0x10>
 800540a:	4284      	cmp	r4, r0
 800540c:	4623      	mov	r3, r4
 800540e:	d807      	bhi.n	8005420 <memmove+0x20>
 8005410:	1e43      	subs	r3, r0, #1
 8005412:	42a1      	cmp	r1, r4
 8005414:	d008      	beq.n	8005428 <memmove+0x28>
 8005416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800541a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800541e:	e7f8      	b.n	8005412 <memmove+0x12>
 8005420:	4402      	add	r2, r0
 8005422:	4601      	mov	r1, r0
 8005424:	428a      	cmp	r2, r1
 8005426:	d100      	bne.n	800542a <memmove+0x2a>
 8005428:	bd10      	pop	{r4, pc}
 800542a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800542e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005432:	e7f7      	b.n	8005424 <memmove+0x24>

08005434 <_sbrk_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	@ (8005450 <_sbrk_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fc f8c0 	bl	80015c4 <_sbrk>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_sbrk_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_sbrk_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200003a8 	.word	0x200003a8

08005454 <memcpy>:
 8005454:	440a      	add	r2, r1
 8005456:	4291      	cmp	r1, r2
 8005458:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800545c:	d100      	bne.n	8005460 <memcpy+0xc>
 800545e:	4770      	bx	lr
 8005460:	b510      	push	{r4, lr}
 8005462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546a:	4291      	cmp	r1, r2
 800546c:	d1f9      	bne.n	8005462 <memcpy+0xe>
 800546e:	bd10      	pop	{r4, pc}

08005470 <_realloc_r>:
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4680      	mov	r8, r0
 8005476:	4615      	mov	r5, r2
 8005478:	460c      	mov	r4, r1
 800547a:	b921      	cbnz	r1, 8005486 <_realloc_r+0x16>
 800547c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005480:	4611      	mov	r1, r2
 8005482:	f7ff bc4b 	b.w	8004d1c <_malloc_r>
 8005486:	b92a      	cbnz	r2, 8005494 <_realloc_r+0x24>
 8005488:	f7ff fbdc 	bl	8004c44 <_free_r>
 800548c:	2400      	movs	r4, #0
 800548e:	4620      	mov	r0, r4
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	f000 f81a 	bl	80054cc <_malloc_usable_size_r>
 8005498:	4285      	cmp	r5, r0
 800549a:	4606      	mov	r6, r0
 800549c:	d802      	bhi.n	80054a4 <_realloc_r+0x34>
 800549e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054a2:	d8f4      	bhi.n	800548e <_realloc_r+0x1e>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7ff fc38 	bl	8004d1c <_malloc_r>
 80054ac:	4607      	mov	r7, r0
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d0ec      	beq.n	800548c <_realloc_r+0x1c>
 80054b2:	42b5      	cmp	r5, r6
 80054b4:	462a      	mov	r2, r5
 80054b6:	4621      	mov	r1, r4
 80054b8:	bf28      	it	cs
 80054ba:	4632      	movcs	r2, r6
 80054bc:	f7ff ffca 	bl	8005454 <memcpy>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4640      	mov	r0, r8
 80054c4:	f7ff fbbe 	bl	8004c44 <_free_r>
 80054c8:	463c      	mov	r4, r7
 80054ca:	e7e0      	b.n	800548e <_realloc_r+0x1e>

080054cc <_malloc_usable_size_r>:
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f18      	subs	r0, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfbc      	itt	lt
 80054d6:	580b      	ldrlt	r3, [r1, r0]
 80054d8:	18c0      	addlt	r0, r0, r3
 80054da:	4770      	bx	lr

080054dc <_init>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr

080054e8 <_fini>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr
